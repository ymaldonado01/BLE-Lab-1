C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyPm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051_Keil_951\Debug/cyPm.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\cyPm.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyPm.c
   3          * Version 4.20
   4          *
   5          * Description:
   6          *  Provides an API for the power management.
   7          *
   8          * Note:
   9          *  Documentation of the API's in this file is located in the
  10          *  System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "cyPm.h"
  20          
  21          
  22          /*******************************************************************
  23          * Place your includes, defines, and code here. Do not use the merge
  24          * region below unless any component datasheet suggests doing so.
  25          *******************************************************************/
  26          /* `#START CY_PM_HEADER_INCLUDE` */
  27          
  28          /* `#END` */
  29          
  30          
  31          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  32          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  33          
  34          /* Convertion table between register's values and frequency in MHz  */
  35          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  36          
  37          /* Function Prototypes */
  38          static void CyPmHibSaveSet(void);
  39          static void CyPmHibRestore(void) ;
  40          
  41          static void CyPmHibSlpSaveSet(void) ;
  42          static void CyPmHibSlpRestore(void) ;
  43          
  44          static void CyPmHviLviSaveDisable(void) ;
  45          static void CyPmHviLviRestore(void) ;
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: CyPmSaveClocks
  50          ********************************************************************************
  51          *
  52          * Summary:
  53          *  This function is called in preparation for entering sleep or hibernate low
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 2   

  54          *  power modes. Saves all the states of the clocking system that do not persist
  55          *  during sleep/hibernate or that need to be altered in preparation for
  56          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers for the
  57          *  active power mode configuration.
  58          *
  59          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  60          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  61          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  62          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  63          *  setting is saved and the Flash wait state setting is set for the current IMO
  64          *  speed.
  65          *
  66          *  Note If the Master Clock source is routed through the DSI inputs, then it
  67          *  must be set manually to another source before using the
  68          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  69          *
  70          * Parameters:
  71          *  None
  72          *
  73          * Return:
  74          *  None
  75          *
  76          * Side Effects:
  77          *  All peripheral clocks are going to be off after this API method call.
  78          *
  79          *******************************************************************************/
  80          void CyPmSaveClocks(void) 
  81          {
  82   1          /* Digital and analog clocks - save enable state and disable them all */
  83   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
  84   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
  85   1          CY_PM_ACT_CFG1_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_A_MASK));
  86   1          CY_PM_ACT_CFG2_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_D_MASK));
  87   1      
  88   1          /* Save current flash wait cycles and set the maximum value */
  89   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
  90   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
  91   1      
  92   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
  93   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
  94   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
  95   1      
  96   1          /* IMO doubler - save enable state */
  97   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
  98   1          {
  99   2              /* IMO doubler enabled - save and disable */
 100   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
 101   2          }
 102   1          else
 103   1          {
 104   2              /* IMO doubler disabled */
 105   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
 106   2          }
 107   1      
 108   1          /* Master clock - save source */
 109   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 110   1      
 111   1          /* Switch Master clock's source from PLL's output to PLL's source */
 112   1          if(CY_MASTER_SOURCE_PLL == cyPmClockBackup.masterClkSrc)
 113   1          {
 114   2              switch (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_PLL_SRC_MASK)
 115   2              {
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 3   

 116   3              case CY_PM_CLKDIST_PLL_SRC_IMO:
 117   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 118   3                  break;
 119   3      
 120   3              case CY_PM_CLKDIST_PLL_SRC_XTAL:
 121   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_XTAL);
 122   3                  break;
 123   3      
 124   3              case CY_PM_CLKDIST_PLL_SRC_DSI:
 125   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_DSI);
 126   3                  break;
 127   3      
 128   3              default:
 129   3                  CYASSERT(0u != 0u);
 130   3                  break;
 131   3              }
 132   2          }
 133   1      
 134   1          /* PLL - check enable state, disable if needed */
 135   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 136   1          {
 137   2              /* PLL is enabled - save state and disable */
 138   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 139   2              CyPLL_OUT_Stop();
 140   2          }
 141   1          else
 142   1          {
 143   2              /* PLL is disabled - save state */
 144   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 145   2          }
 146   1      
 147   1          /* IMO - set appropriate frequency for LPM */
 148   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 149   1      
 150   1          /* IMO - save enable state and enable without wait to settle */
 151   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 152   1          {
 153   2              /* IMO - save enabled state */
 154   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
 155   2          }
 156   1          else
 157   1          {
 158   2              /* IMO - save disabled state */
 159   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 160   2      
 161   2              /* Enable the IMO. Use software delay instead of the FTW-based inside */
 162   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 163   2      
 164   2              /* Settling time of the IMO is of the order of less than 6us */
 165   2              CyDelayUs(6u);
 166   2          }
 167   1      
 168   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 169   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 170   1          {
 171   2              /* DSI or XTAL CLK */
 172   2              cyPmClockBackup.imoClkSrc =
 173   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 174   2      
 175   2              /* IMO -  set IMOCLK source to IMO */
 176   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 4   

 177   2          }
 178   1          else
 179   1          {
 180   2              /* IMO */
 181   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 182   2          }
 183   1      
 184   1          /* Save clk_imo source */
 185   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 186   1      
 187   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 188   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 189   1          {
 190   2              /* Set IMOCLK to source for clk_imo */
 191   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 192   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 193   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 194   1      
 195   1          /* IMO doubler - disable it (saved above) */
 196   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 197   1          {
 198   2              CyIMO_DisableDoubler();
 199   2          }
 200   1      
 201   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 202   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 203   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 204   1          {
 205   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 206   2          }    /* No change if master clock divider is 1 */
 207   1      
 208   1          /* Master clock source - set it to IMO if not yet. */
 209   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 210   1          {
 211   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 212   2          }    /* No change if master clock source is IMO */
 213   1      
 214   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 215   1          cyPmClockBackup.clkBusDiv = (uint16) ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 216   1          cyPmClockBackup.clkBusDiv |= CY_PM_CLK_BUS_LSB_DIV_REG;
 217   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 218   1          {
 219   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 220   2          }    /* Do nothing if saved and actual values are equal */
 221   1      
 222   1          /* Set number of wait cycles for flash according to CPU frequency in MHz */
 223   1          CyFlash_SetWaitCycles((uint8)CY_PM_GET_CPU_FREQ_MHZ);
 224   1      
 225   1          /* MHz ECO - check enable state and disable if needed */
 226   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 227   1          {
 228   2              /* MHz ECO is enabled - save state and disable */
 229   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 230   2              CyXTAL_Stop();
 231   2          }
 232   1          else
 233   1          {
 234   2              /* MHz ECO is disabled - save state */
 235   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 236   2          }
 237   1      
 238   1      
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 5   

 239   1          /***************************************************************************
 240   1          * Save the enable state of delay between the system bus clock and each of the
 241   1          * 4 individual analog clocks. This bit non-retention and its value should
 242   1          * be restored on wakeup.
 243   1          ***************************************************************************/
 244   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
 245   1          {
 246   2              cyPmClockBackup.clkDistDelay = CY_PM_ENABLED;
 247   2          }
 248   1          else
 249   1          {
 250   2              cyPmClockBackup.clkDistDelay = CY_PM_DISABLED;
 251   2          }
 252   1      }
 253          
 254          
 255          /*******************************************************************************
 256          * Function Name: CyPmRestoreClocks
 257          ********************************************************************************
 258          *
 259          * Summary:
 260          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 261          *  The Flash wait state setting is also restored.
 262          *
 263          *  Note If the Master Clock source is routed through the DSI inputs, then it
 264          *  must be set manually to another source before using the
 265          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 266          *
 267          *  PSoC 3 and PSoC 5LP:
 268          *  The merge region could be used to process state when the megahertz crystal is
 269          *  not ready after a hold-off timeout.
 270          *
 271          *  PSoC 5:
 272          *  The 130 ms is given for the megahertz crystal to stabilize. Its readiness is
 273          *  not verified after a hold-off timeout.
 274          *
 275          * Parameters:
 276          *  None
 277          *
 278          * Return:
 279          *  None
 280          *
 281          *******************************************************************************/
 282          void CyPmRestoreClocks(void) 
 283          {
 284   1          cystatus status = CYRET_TIMEOUT;
 285   1          uint16 i;
 286   1          uint16 clkBusDivTmp;
 287   1      
 288   1      
 289   1          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
 290   1          const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
 291   1              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
 292   1              CY_IMO_FREQ_48MHZ, 5u, 6u};
 293   1      
 294   1          /* Restore enable state of delay between system bus clock and ACLKs. */
 295   1          if(CY_PM_ENABLED == cyPmClockBackup.clkDistDelay)
 296   1          {
 297   2              /* Delay for both bandgap and delay line to settle out */
 298   2              CyDelayCycles((uint32)(CY_PM_CLK_DELAY_BANDGAP_SETTLE_US + CY_PM_CLK_DELAY_BIAS_SETTLE_US) *
 299   2                              CY_PM_GET_CPU_FREQ_MHZ);
 300   2      
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 6   

 301   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
 302   2          }
 303   1      
 304   1          /* MHz ECO restore state */
 305   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 306   1          {
 307   2              /***********************************************************************
 308   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with a non zero wait
 309   2              * period uses FTW for period measurement. This could cause a problem
 310   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 311   2              * So, the XTAL wait procedure is implemented with a software delay.
 312   2              ***********************************************************************/
 313   2      
 314   2              /* Enable XMHZ XTAL with no wait */
 315   2              (void) CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 316   2      
 317   2              /* Read XERR bit to clear it */
 318   2              (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
 319   2      
 320   2              /* Wait */
 321   2              for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
 322   2              {
 323   3                  /* Make a 200 microseconds delay */
 324   3                  CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 325   3      
 326   3                  /* High output indicates oscillator failure */
 327   3                  if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
 328   3                  {
 329   4                      status = CYRET_SUCCESS;
 330   4                      break;
 331   4                  }
 332   3              }
 333   2      
 334   2              if(CYRET_TIMEOUT == status)
 335   2              {
 336   3                  /*******************************************************************
 337   3                  * Process the situation when megahertz crystal is not ready.
 338   3                  * Time to stabilize the value is crystal specific.
 339   3                  *******************************************************************/
 340   3                 /* `#START_MHZ_ECO_TIMEOUT` */
 341   3      
 342   3                 /* `#END` */
 343   3              }
 344   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 345   1      
 346   1      
 347   1          /* Temprorary set maximum flash wait cycles */
 348   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 349   1      
 350   1          /* XTAL and DSI clocks are ready to be source for Master clock. */
 351   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
 352   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 353   1          {
 354   2              /* Restore Master clock's divider */
 355   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 356   2              {
 357   3                  /* Restore Master clock divider */
 358   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 359   3              }
 360   2      
 361   2              /* Restore Master clock source */
 362   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 7   

 363   2          }
 364   1      
 365   1          /* IMO - restore IMO frequency */
 366   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 367   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 368   1          {
 369   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 370   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 371   2          }
 372   1          else
 373   1          {
 374   2              /* Restore IMO frequency */
 375   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 376   2      
 377   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 378   2              {
 379   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 380   3              }
 381   2              else
 382   2              {
 383   3                  CY_PM_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_PM_FASTCLK_IMO_CR_USB));
 384   3              }
 385   2          }
 386   1      
 387   1          /* IMO - restore enable state if needed */
 388   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
 389   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 390   1          {
 391   2              /* IMO - restore enabled state */
 392   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 393   2          }
 394   1      
 395   1          /* IMO - restore IMOCLK source */
 396   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 397   1      
 398   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 399   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 400   1          {
 401   2              CyIMO_EnableDoubler();
 402   2          }
 403   1      
 404   1          /* IMO - restore clk_imo source, if needed */
 405   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 406   1          {
 407   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 408   2                                      cyPmClockBackup.clkImoSrc;
 409   2          }
 410   1      
 411   1      
 412   1          /* PLL restore state */
 413   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 414   1          {
 415   2              /***********************************************************************
 416   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 417   2              * for period measurement. This could cause a problem if CTW/FTW is used
 418   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 419   2              * wait procedure is implemented with a software delay.
 420   2              ***********************************************************************/
 421   2              status = CYRET_TIMEOUT;
 422   2      
 423   2              /* Enable PLL */
 424   2              (void) CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 8   

 425   2      
 426   2              /* Read to clear lock status after delay */
 427   2              CyDelayUs((uint32)80u);
 428   2              (void) CY_PM_FASTCLK_PLL_SR_REG;
 429   2      
 430   2              /* It should take 250 us lock: 251-80 = 171 */
 431   2              for(i = 171u; i > 0u; i--)
 432   2              {
 433   3                  CyDelayUs((uint32)1u);
 434   3      
 435   3                  /* Accept PLL is OK after two consecutive polls indicate PLL lock */
 436   3                  if((0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)) &&
 437   3                     (0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)))
 438   3                  {
 439   4                      status = CYRET_SUCCESS;
 440   4                      break;
 441   4                  }
 442   3              }
 443   2      
 444   2              if(CYRET_TIMEOUT == status)
 445   2              {
 446   3                  /*******************************************************************
 447   3                  * Process the situation when PLL is not ready.
 448   3                  *******************************************************************/
 449   3                 /* `#START_PLL_TIMEOUT` */
 450   3      
 451   3                 /* `#END` */
 452   3              }
 453   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 454   1      
 455   1      
 456   1          /* PLL and IMO is ready to be source for Master clock */
 457   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 458   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 459   1          {
 460   2              /* Restore Master clock divider */
 461   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 462   2              {
 463   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 464   3              }
 465   2      
 466   2              /* Restore Master clock source */
 467   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 468   2          }
 469   1      
 470   1          /* IMO - disable if it was originally disabled */
 471   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 472   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 473   1          {
 474   2              CyIMO_Stop();
 475   2          }
 476   1      
 477   1          /* Bus clock - restore divider, if needed */
 478   1          clkBusDivTmp = (uint16) ((uint16)CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 479   1          clkBusDivTmp |= CY_PM_CLK_BUS_LSB_DIV_REG;
 480   1          if(cyPmClockBackup.clkBusDiv != clkBusDivTmp)
 481   1          {
 482   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 483   2          }
 484   1      
 485   1          /* Restore flash wait cycles */
 486   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ((uint8)(~CY_PM_CACHE_CR_CYCLES_MASK))) |
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 9   

 487   1                                 cyPmClockBackup.flashWaitCycles);
 488   1      
 489   1          /* Digital and analog clocks - restore state */
 490   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 491   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
 492   1      }
 493          
 494          
 495          /*******************************************************************************
 496          * Function Name: CyPmAltAct
 497          ********************************************************************************
 498          *
 499          * Summary:
 500          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 501          *  state can allow for any of the capabilities of the device to be active, but
 502          *  the operation of this function is dependent on the CPU being disabled during
 503          *  the Alternate Active state. The configuration code and the component APIs
 504          *  will configure the template for the Alternate Active state to be the same as
 505          *  the Active state with the exception that the CPU will be disabled during
 506          *  Alternate Active.
 507          *
 508          *  Note Before calling this function, you must manually configure the power mode
 509          *  of the source clocks for the timer that is used as the wakeup timer.
 510          *
 511          *  PSoC 3:
 512          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 513          *  specified, then the appropriate timer state is configured as specified with
 514          *  the interrupt for that timer disabled.  The wakeup source will be the
 515          *  combination of the values specified in the wakeupSource and any timer
 516          *  specified in the wakeupTime argument.  Once the wakeup condition is
 517          *  satisfied, then all saved state is restored and the function returns in the
 518          *  Active state.
 519          *
 520          *  Note that if the wakeupTime is made with a different value, the period before
 521          *  the wakeup occurs can be significantly shorter than the specified time.  If
 522          *  the next call is made with the same wakeupTime value, then the wakeup will
 523          *  occur the specified period after the previous wakeup occurred.
 524          *
 525          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 526          *  specified timer will be left as specified by wakeupTime with the timer
 527          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 528          *  configured for wakeup, for example with the SleepTimer or RTC components,
 529          *  then specify NONE for the wakeupTime and include the appropriate source for
 530          *  wakeupSource.
 531          *
 532          *  PSoC 5LP:
 533          *  This function is used to both enter the Alternate Active mode and halt the
 534          *  processor.  For PSoC 3 these two actions must be paired together.  With PSoC
 535          *  5LP the processor can be halted independently with the __WFI() function from
 536          *  the CMSIS library that is included in Creator.  This function should be used
 537          *  instead when the action required is just to halt the processor until an
 538          *  enabled interrupt occurs.
 539          *
 540          *  The wakeupTime parameter is not used for this device. It must be set to zero
 541          *  (PM_ALT_ACT_TIME_NONE). The wake up time configuration can be done by a
 542          *  separate component: the CTW wakeup interval should be configured with the
 543          *  Sleep Timer component and one second interval should be configured with the
 544          *  RTC component.
 545          *
 546          *  The wakeup behavior depends on the wakeupSource parameter in the following
 547          *  manner: upon function execution the device will be switched from Active to
 548          *  Alternate Active mode and then the CPU will be halted. When an enabled wakeup
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 10  

 549          *  event occurs the device will return to Active mode.  Similarly when an
 550          *  enabled interrupt occurs the CPU will be started. These two actions will
 551          *  occur together provided that the event that occurs is an enabled wakeup
 552          *  source and also generates an interrupt. If just the wakeup event occurs then
 553          *  the device will be in Active mode, but the CPU will remain halted waiting for
 554          *  an interrupt. If an interrupt occurs from something other than a wakeup
 555          *  source, then the CPU will restart with the device in Alternate Active mode
 556          *  until a wakeup event occurs.
 557          *
 558          *  For example, if CyPmAltAct(PM_ALT_ACT_TIME_NONE, PM_ALT_ACT_SRC_PICU) is
 559          *  called and PICU interrupt occurs, the CPU will be started and device will be
 560          *  switched into Active mode. And if CyPmAltAct(PM_ALT_ACT_TIME_NONE,
 561          *  PM_ALT_ACT_SRC_NONE) is called and PICU interrupt occurs, the CPU will be
 562          *  started while device remains in Alternate Active mode.
 563          *
 564          * Parameters:
 565          *  wakeupTime: Specifies a timer wakeup source and the frequency of that
 566          *              source. For PSoC 5LP this parameter is ignored.
 567          *
 568          *           Define                      Time
 569          *  PM_ALT_ACT_TIME_NONE             None
 570          *  PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 571          *  PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 572          *  PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 573          *  PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 574          *  PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 575          *  PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 576          *  PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 577          *  PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 578          *  PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 579          *  PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 580          *  PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 581          *  PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 582          *  PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 583          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56 ms
 584          *
 585          *  *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 586          *           specifies how many increments of 10 us to delay.
 587                      For PSoC 3 silicon the valid range of  values is 1 to 256.
 588          *
 589          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 590          *                   a wakeupTime has been specified, the associated timer will be
 591          *                   included as a wakeup source.
 592          *
 593          *           Define                      Source
 594          *  PM_ALT_ACT_SRC_NONE              None
 595          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 596          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 597          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 598          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 599          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 600          *  PM_ALT_ACT_SRC_PICU              PICU
 601          *  PM_ALT_ACT_SRC_I2C               I2C
 602          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 603          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel*
 604          *  PM_ALT_ACT_SRC_VD                High and Low Voltage Detection (HVI, LVI)*
 605          *  PM_ALT_ACT_SRC_CTW               Central Timewheel**
 606          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS**
 607          *  PM_ALT_ACT_SRC_LCD               LCD
 608          *
 609          *  *Note : FTW and HVI/LVI wakeup signals are in the same mask bit.
 610          *  **Note: CTW and One PPS wakeup signals are in the same mask bit.
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 11  

 611          *
 612          *  When specifying a Comparator as the wakeupSource, an instance specific define
 613          *  that will track with the specific comparator that the instance
 614          *  is placed into should be used. As an example, for a Comparator instance named MyComp the
 615          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 616          *
 617          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 618          *  function must be called upon wakeup with a corresponding parameter. Please
 619          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 620          *  information.
 621          *
 622          * Return:
 623          *  None
 624          *
 625          * Reentrant:
 626          *  No
 627          *
 628          * Side Effects:
 629          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 630          *  specified timer will be left as specified by wakeupTime with the timer
 631          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 632          *  used as wakeup time) or ILO 100 KHz (if the FTW timer is used as wakeup time)
 633          *  will be left started.
 634          *
 635          *******************************************************************************/
 636          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) 
 637          {
 638   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_ALT_ACT_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 649   1      
 650   1      
 651   1          #if(CY_PSOC3)
 652   1      
 653   1              /* FTW - save current and set new configuration */
 654   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 655   1              {
 656   2                  CyPmFtwSetInterval(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 657   2      
 658   2                  /* Include associated timer to wakeupSource */
 659   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 660   2              }
 661   1      
 662   1              /* CTW - save current and set new configuration */
 663   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
 664   1              {
 665   2                  /* Save current CTW configuration and set new one */
 666   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 667   2      
 668   2                  /* Include associated timer to wakeupSource */
 669   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 670   2              }
 671   1      
 672   1              /* 1PPS - save current and set new configuration */
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 12  

 673   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 674   1              {
 675   2                  /* Save current 1PPS configuration and set new one */
 676   2                  CyPmOppsSet();
 677   2      
 678   2                  /* Include associated timer to wakeupSource */
 679   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 680   2              }
 681   1      
 682   1          #endif /* (CY_PSOC3) */
 683   1      
 684   1      
 685   1          /* Save and set new wake up configuration */
 686   1      
 687   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 688   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 689   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 690   1      
 691   1          /* Comparators */
 692   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 693   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 694   1      
 695   1          /* LCD */
 696   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 697   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 698   1      
 699   1      
 700   1          /* Switch to the Alternate Active mode */
 701   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_ALT_ACT)
             -;
 702   1      
 703   1          /* Recommended readback. */
 704   1          (void) CY_PM_MODE_CSR_REG;
 705   1      
 706   1          /* Two recommended NOPs to get into the mode. */
 707   1          CY_NOP;
 708   1          CY_NOP;
 709   1      
 710   1          /* Execute WFI instruction (for ARM-based devices only) */
 711   1          CY_PM_WFI;
 712   1      
 713   1          /* Point of return from Alternate Active Mode */
 714   1      
 715   1          /* Restore wake up configuration */
 716   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
 717   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
 718   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
 719   1      }
 720          
 721          
 722          /*******************************************************************************
 723          * Function Name: CyPmSleep
 724          ********************************************************************************
 725          *
 726          * Summary:
 727          *  Puts the part into the Sleep state.
 728          *
 729          *  Note Before calling this function, you must manually configure the power
 730          *  mode of the source clocks for the timer that is used as the wakeup timer.
 731          *
 732          *  Note Before calling this function, you must prepare clock tree configuration
 733          *  for the low power mode by calling CyPmSaveClocks(). And restore clock
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 13  

 734          *  configuration after CyPmSleep() execution by calling CyPmRestoreClocks(). See
 735          *  Power Management section, Clock Configuration subsection of the System
 736          *  Reference Guide for more information.
 737          *
 738          *  PSoC 3:
 739          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 740          *  then the appropriate timer state is configured as specified with the
 741          *  interrupt for that timer disabled.  The wakeup source will be a combination
 742          *  of the values specified in the wakeupSource and any timer specified in the
 743          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 744          *  state is restored and the function returns in the Active state.
 745          *
 746          *  Note that if the wakeupTime is made with a different value, the period before
 747          *  the wakeup occurs can be significantly shorter than the specified time.  If
 748          *  the next call is made with the same wakeupTime value, then the wakeup will
 749          *  occur the specified period after the previous wakeup occurred.
 750          *
 751          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 752          *  specified timer will be left as specified by wakeupTime with the timer
 753          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 754          *  configured for wakeup, for example with the SleepTimer or RTC components,
 755          *  then specify NONE for the wakeupTime and include the appropriate source for
 756          *  wakeupSource.
 757          *
 758          *  PSoC 5LP:
 759          *  The wakeupTime parameter is not used and the only NONE can be specified.
 760          *  The wakeup time must be configured with the component, SleepTimer for CTW
 761          *  intervals and RTC for 1PPS interval. The component must be configured to
 762          *  generate interrupt.
 763          *
 764          * Parameters:
 765          *  wakeupTime:      Specifies a timer wakeup source and the frequency of that
 766          *                   source. For PSoC 5LP, this parameter is ignored.
 767          *
 768          *           Define                      Time
 769          *  PM_SLEEP_TIME_NONE               None
 770          *  PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 771          *  PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 772          *  PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 773          *  PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 774          *  PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 775          *  PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 776          *  PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 777          *  PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 778          *  PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 779          *  PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 780          *  PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 781          *  PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 782          *  PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 783          *
 784          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 785          *                   a wakeupTime has been specified the associated timer will be
 786          *                   included as a wakeup source.
 787          *
 788          *           Define                      Source
 789          *  PM_SLEEP_SRC_NONE                None
 790          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 791          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 792          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
 793          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 794          *  PM_SLEEP_SRC_PICU                PICU
 795          *  PM_SLEEP_SRC_I2C                 I2C
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 14  

 796          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 797          *  PM_SLEEP_SRC_VD                  High and Low Voltage Detection (HVI, LVI)
 798          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 799          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 800          *  PM_SLEEP_SRC_LCD                 LCD
 801          *
 802          *  *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 803          *
 804          *  When specifying a Comparator as the wakeupSource an instance specific define
 805          *  should be used that will track with the specific comparator that the instance
 806          *  is placed into. As an example for a Comparator instance named MyComp the
 807          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 808          *
 809          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 810          *  function must be called upon wakeup with corresponding parameter. Please
 811          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 812          *  information.
 813          *
 814          * Return:
 815          *  None
 816          *
 817          * Reentrant:
 818          *  No
 819          *
 820          * Side Effects and Restrictions:
 821          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 822          *  specified timer will be left as specified by wakeupTime with the timer
 823          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 824          *  used as wake up time) will be left started.
 825          *
 826          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
 827          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 828          *  delay is measured using rising edges of the 1 kHz ILO.
 829          *
 830          *  For PSoC 3 silicon hardware buzz should be disabled before entering a sleep
 831          *  power mode. It is disabled by PSoC Creator during startup.
 832          *  If a Low Voltage Interrupt (LVI), High Voltage Interrupt (HVI) or Brown Out
 833          *  detect (power supply supervising capabilities) are required in a design
 834          *  during sleep, use the Central Time Wheel (CTW) to periodically wake the
 835          *  device, perform software buzz, and refresh the supervisory services. If LVI,
 836          *  HVI, or Brown Out is not required, then CTW is not required.
 837          *  Refer to the device errata for more information.
 838          *
 839          *******************************************************************************/
 840          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) 
 841          {
 842   1          uint8 interruptState;
 843   1      
 844   1          /* Save current global interrupt enable and disable it */
 845   1          interruptState = CyEnterCriticalSection();
 846   1      
 847   1      
 848   1          /***********************************************************************
 849   1          * The Hibernate/Sleep regulator has a settling time after a reset.
 850   1          * During this time, the system ignores requests to enter Sleep and
 851   1          * Hibernate modes. The holdoff delay is measured using rising edges of
 852   1          * the 1 kHz ILO.
 853   1          ***********************************************************************/
 854   1          if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
 855   1          {
 856   2              /* Disable hold off - no action on restore */
 857   2              CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 15  

 858   2          }
 859   1          else
 860   1          {
 861   2              /* Abort, device is not ready for low power mode entry */
 862   2      
 863   2              /* Restore global interrupt enable state */
 864   2              CyExitCriticalSection(interruptState);
 865   2      
 866   2              return;
 867   2          }
 868   1      
 869   1      
 870   1          /***********************************************************************
 871   1          * PSoC3 < TO6:
 872   1          * - Hardware buzz must be disabled before the sleep mode entry.
 873   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so they must
 874   1          *   be also disabled.
 875   1          *
 876   1          * PSoC3 >= TO6:
 877   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so hardware
 878   1          *   buzz must be enabled before the sleep mode entry and restored on
 879   1          *   the wakeup.
 880   1          ***********************************************************************/
 881   1          #if(CY_PSOC3)
 882   1      
 883   1              /* Silicon Revision ID is below TO6 */
 884   1              if(CYDEV_CHIP_REV_ACTUAL < 5u)
 885   1              {
 886   2                  /* Hardware buzz expected to be disabled in Sleep mode */
 887   2                  CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
 888   2              }
 889   1      
 890   1      
 891   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 892   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 893   1              {
 894   2                  if(CYDEV_CHIP_REV_ACTUAL < 5u)
 895   2                  {
 896   3                      /* LVI/HVI requires hardware buzz to be enabled */
 897   3                      CYASSERT(0u != 0u);
 898   3                  }
 899   2                  else
 900   2                  {
 901   3                      if (0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ))
 902   3                      {
 903   4                          cyPmBackup.hardwareBuzz = CY_PM_DISABLED;
 904   4                          CY_PM_PWRSYS_WAKE_TR2_REG |= CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ;
 905   4                      }
 906   3                      else
 907   3                      {
 908   4                          cyPmBackup.hardwareBuzz = CY_PM_ENABLED;
 909   4                      }
 910   3                  }
 911   2              }
 912   1      
 913   1          #endif /* (CY_PSOC3) */
 914   1      
 915   1      
 916   1          /*******************************************************************************
 917   1          * For ARM-based devices,interrupt is required for the CPU to wake up. The
 918   1          * Power Management implementation assumes that wakeup time is configured with a
 919   1          * separate component (component-based wakeup time configuration) for
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 16  

 920   1          * interrupt to be issued on terminal count. For more information, refer to the
 921   1          * Wakeup Time Configuration section of System Reference Guide.
 922   1          *******************************************************************************/
 923   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_SLEEP_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 934   1      
 935   1      
 936   1          CyPmHibSlpSaveSet();
 937   1      
 938   1      
 939   1          #if(CY_PSOC3)
 940   1      
 941   1              /* CTW - save current and set new configuration */
 942   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 943   1              {
 944   2                  /* Save current and set new configuration of CTW */
 945   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 946   2      
 947   2                  /* Include associated timer to wakeupSource */
 948   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 949   2              }
 950   1      
 951   1              /* 1PPS - save current and set new configuration */
 952   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 953   1              {
 954   2                  /* Save current and set new configuration of the 1PPS */
 955   2                  CyPmOppsSet();
 956   2      
 957   2                  /* Include associated timer to wakeupSource */
 958   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 959   2              }
 960   1      
 961   1          #endif /* (CY_PSOC3) */
 962   1      
 963   1      
 964   1          /* Save and set new wake up configuration */
 965   1      
 966   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 967   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 968   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 969   1      
 970   1          /* Comparators */
 971   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 972   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 973   1      
 974   1          /* LCD */
 975   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 976   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 977   1      
 978   1      
 979   1          /*******************************************************************
 980   1          * Do not use the merge region below unless any component datasheet
 981   1          * suggests doing so.
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 17  

 982   1          *******************************************************************/
 983   1          /* `#START CY_PM_JUST_BEFORE_SLEEP` */
 984   1      
 985   1          /* `#END` */
 986   1      
 987   1      
 988   1          /* Last moment IMO frequency change */
 989   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
 990   1          {
 991   2              /* IMO frequency is 12 MHz */
 992   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
 993   2          }
 994   1          else
 995   1          {
 996   2              /* IMO frequency is not 12 MHz */
 997   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
 998   2      
 999   2              /* Save IMO frequency */
1000   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1001   2      
1002   2              /* Set IMO frequency to 12 MHz */
1003   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1004   2          }
1005   1      
1006   1          /* Switch to Sleep mode */
1007   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_SLEEP);
1008   1      
1009   1          /* Recommended readback. */
1010   1          (void) CY_PM_MODE_CSR_REG;
1011   1      
1012   1          /* Two recommended NOPs to get into mode. */
1013   1          CY_NOP;
1014   1          CY_NOP;
1015   1      
1016   1          /* Execute WFI instruction (for ARM-based devices only) */
1017   1          CY_PM_WFI;
1018   1      
1019   1          /* Point of return from Sleep Mode */
1020   1      
1021   1          /* Restore last moment IMO frequency change */
1022   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1023   1          {
1024   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1025   2                                          cyPmBackup.imoActFreq;
1026   2          }
1027   1      
1028   1      
1029   1          /*******************************************************************
1030   1          * Do not use merge region below unless any component datasheet
1031   1          * suggest to do so.
1032   1          *******************************************************************/
1033   1          /* `#START CY_PM_JUST_AFTER_WAKEUP_FROM_SLEEP` */
1034   1      
1035   1          /* `#END` */
1036   1      
1037   1      
1038   1          /* Restore hardware configuration */
1039   1          CyPmHibSlpRestore();
1040   1      
1041   1      
1042   1          /* Disable hardware buzz, if it was previously enabled */
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 18  

1043   1          #if(CY_PSOC3)
1044   1      
1045   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
1046   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
1047   1              {
1048   2                  if(CYDEV_CHIP_REV_ACTUAL >= 5u)
1049   2                  {
1050   3                      if (CY_PM_DISABLED == cyPmBackup.hardwareBuzz)
1051   3                      {
1052   4                          CY_PM_PWRSYS_WAKE_TR2_REG &= (uint8)(~CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ);
1053   4                      }
1054   3                  }
1055   2              }
1056   1      
1057   1          #endif /* (CY_PSOC3) */
1058   1      
1059   1      
1060   1          /* Restore current wake up configuration */
1061   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1062   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1063   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1064   1      
1065   1          /* Restore global interrupt enable state */
1066   1          CyExitCriticalSection(interruptState);
1067   1      }
1068          
1069          
1070          /*******************************************************************************
1071          * Function Name: CyPmHibernate
1072          ********************************************************************************
1073          *
1074          * Summary:
1075          *  Puts the part into the Hibernate state.
1076          *
1077          *  PSoC 3 and PSoC 5LP:
1078          *  Before switching to Hibernate, the current status of the PICU wakeup source
1079          *  bit is saved and then set. This configures the device to wake up from the
1080          *  PICU. Make sure you have at least one pin configured to generate PICU
1081          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
1082          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
1083          *  In the Pins component datasheet, this register is referred to as the IRQ
1084          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
1085          *  the PSoC returns to the Active state.
1086          *
1087          * Parameters:
1088          *  None
1089          *
1090          * Return:
1091          *  None
1092          *
1093          * Reentrant:
1094          *  No
1095          *
1096          * Side Effects:
1097          *  Applications must wait 20 us before re-entering hibernate or sleep after
1098          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1099          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1100          *  requirement begins when the device wakes up. There is no hardware check that
1101          *  this requirement is met. The specified delay should be done on ISR entry.
1102          *
1103          *  After the wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin is
1104          *  instance name of the Pins component) function must be called to clear the
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 19  

1105          *  latched pin events to allow the proper Hibernate mode entry and to enable
1106          *  detection of future events.
1107          *
1108          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1109          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1110          *  delay is measured using the rising edges of the 1 kHz ILO.
1111          *
1112          *******************************************************************************/
1113          void CyPmHibernate(void) 
1114          {
1115   1          uint8 interruptState;
1116   1      
1117   1          /* Save current global interrupt enable and disable it */
1118   1          interruptState = CyEnterCriticalSection();
1119   1      
1120   1              /***********************************************************************
1121   1              * The Hibernate/Sleep regulator has a settling time after a reset.
1122   1              * During this time, the system ignores requests to enter the Sleep and
1123   1              * Hibernate modes. The holdoff delay is measured using the rising edges of
1124   1              * the 1 kHz ILO.
1125   1              ***********************************************************************/
1126   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
1127   1              {
1128   2                  /* Disable hold off - no action on restore */
1129   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
1130   2              }
1131   1              else
1132   1              {
1133   2                  /* Abort, device is not ready for low power mode entry */
1134   2      
1135   2                  /* Restore global interrupt enable state */
1136   2                  CyExitCriticalSection(interruptState);
1137   2      
1138   2                  return;
1139   2              }
1140   1      
1141   1          CyPmHibSaveSet();
1142   1      
1143   1      
1144   1          /* Save and enable only wakeup on PICU */
1145   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1146   1          CY_PM_WAKEUP_CFG0_REG = CY_PM_WAKEUP_PICU;
1147   1      
1148   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1149   1          CY_PM_WAKEUP_CFG1_REG = 0x00u;
1150   1      
1151   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1152   1          CY_PM_WAKEUP_CFG2_REG = 0x00u;
1153   1      
1154   1      
1155   1          /* Last moment IMO frequency change */
1156   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1157   1          {
1158   2              /* IMO frequency is 12 MHz */
1159   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1160   2          }
1161   1          else
1162   1          {
1163   2              /* IMO frequency is not 12 MHz */
1164   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1165   2      
1166   2              /* Save IMO frequency */
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 20  

1167   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1168   2      
1169   2              /* Set IMO frequency to 12 MHz */
1170   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1171   2          }
1172   1      
1173   1      
1174   1          /* Switch to Hibernate Mode */
1175   1          CY_PM_MODE_CSR_REG = (CY_PM_MODE_CSR_REG & ((uint8) (~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_HIBERNAT
             -E;
1176   1      
1177   1          /* Recommended readback. */
1178   1          (void) CY_PM_MODE_CSR_REG;
1179   1      
1180   1          /* Two recommended NOPs to get into mode. */
1181   1          CY_NOP;
1182   1          CY_NOP;
1183   1      
1184   1          /* Execute WFI instruction (for ARM-based devices only) */
1185   1          CY_PM_WFI;
1186   1      
1187   1      
1188   1          /* Point of return from Hibernate mode */
1189   1      
1190   1      
1191   1          /* Restore last moment IMO frequency change */
1192   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1193   1          {
1194   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1195   2                                          cyPmBackup.imoActFreq;
1196   2          }
1197   1      
1198   1      
1199   1          /* Restore device for proper Hibernate mode exit*/
1200   1          CyPmHibRestore();
1201   1      
1202   1          /* Restore current wake up configuration */
1203   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1204   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1205   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1206   1      
1207   1          /* Restore global interrupt enable state */
1208   1          CyExitCriticalSection(interruptState);
1209   1      }
1210          
1211          
1212          /*******************************************************************************
1213          * Function Name: CyPmReadStatus
1214          ********************************************************************************
1215          *
1216          * Summary:
1217          *  Manages the Power Manager Interrupt Status Register.  This register has the
1218          *  interrupt status for the one pulse per second, central timewheel and fast
1219          *  timewheel timers.  This hardware register clears on read.  To allow for only
1220          *  clearing the bits of interest and preserving the other bits, this function
1221          *  uses a shadow register that retains the state.  This function reads the
1222          *  status register and ORs that value with the shadow register.  That is the
1223          *  value that is returned.  Then the bits in the mask that are set are cleared
1224          *  from this value and written back to the shadow register.
1225          *
1226          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 21  

1227          *  after a CTW event has occurred.
1228          *
1229          * Parameters:
1230          *  mask: Bits in the shadow register to clear.
1231          *
1232          *       Define                      Source
1233          *  CY_PM_FTW_INT                Fast Timewheel
1234          *  CY_PM_CTW_INT                Central Timewheel
1235          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1236          *
1237          * Return:
1238          *  Status.  Same bits values as the mask parameter.
1239          *
1240          *******************************************************************************/
1241          uint8 CyPmReadStatus(uint8 mask) 
1242          {
1243   1          static uint8 interruptStatus;
1244   1          uint8 interruptState;
1245   1          uint8 tmpStatus;
1246   1      
1247   1          /* Enter critical section */
1248   1          interruptState = CyEnterCriticalSection();
1249   1      
1250   1          /* Save value of register, copy it and clear desired bit */
1251   1          interruptStatus |= CY_PM_INT_SR_REG;
1252   1          tmpStatus = interruptStatus;
1253   1          interruptStatus &= ((uint8)(~mask));
1254   1      
1255   1          /* Exit critical section */
1256   1          CyExitCriticalSection(interruptState);
1257   1      
1258   1          return(tmpStatus);
1259   1      }
1260          
1261          
1262          /*******************************************************************************
1263          * Function Name: CyPmHibSaveSet
1264          ********************************************************************************
1265          *
1266          * Summary:
1267          *  Prepare device for proper Hibernate low power mode entry:
1268          *  - Disables I2C backup regulator
1269          *  - Saves ILO power down mode state and enable it
1270          *  - Saves state of 1 kHz and 100 kHz ILO and disable them
1271          *  - Disables sleep regulator and shorts vccd to vpwrsleep
1272          *  - Save LVI/HVI configuration and disable them - CyPmHviLviSaveDisable()
1273          *  - CyPmHibSlpSaveSet() function is called
1274          *
1275          * Parameters:
1276          *  None
1277          *
1278          * Return:
1279          *  None
1280          *
1281          * Reentrant:
1282          *  No
1283          *
1284          *******************************************************************************/
1285          static void CyPmHibSaveSet(void) 
1286          {
1287   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
1288   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 22  

1289   1          {
1290   2              /***********************************************************************
1291   2              * If the I2C backup regulator is enabled, all the fixed-function registers
1292   2              * store their values while the device is in the low power mode, otherwise their
1293   2              * configuration is lost. The I2C API makes a decision to restore or not
1294   2              * to restore I2C registers based on this. If this regulator will be
1295   2              * disabled and then enabled, I2C API will suppose that the I2C block
1296   2              * registers preserved their values, while this is not true. So, the
1297   2              * backup regulator is disabled. The I2C sleep APIs is responsible for
1298   2              * restoration.
1299   2              ***********************************************************************/
1300   2      
1301   2              /* Disable I2C backup register */
1302   2              CY_PM_PWRSYS_CR1_REG &= ((uint8)(~CY_PM_PWRSYS_CR1_I2CREG_BACKUP));
1303   2          }
1304   1      
1305   1      
1306   1          /* Save current ILO power mode and ensure low power mode */
1307   1          cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
1308   1      
1309   1          /* Save current 1kHz ILO enable state. Disabled automatically. */
1310   1          cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
1311   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1312   1      
1313   1          /* Save current 100kHz ILO enable state. Disabled automatically. */
1314   1          cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
1315   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1316   1      
1317   1      
1318   1          /* Disable the sleep regulator and shorts vccd to vpwrsleep */
1319   1          if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
1320   1          {
1321   2              /* Save current bypass state */
1322   2              cyPmBackup.slpTrBypass = CY_PM_DISABLED;
1323   2              CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
1324   2          }
1325   1          else
1326   1          {
1327   2              cyPmBackup.slpTrBypass = CY_PM_ENABLED;
1328   2          }
1329   1      
1330   1          /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
1331   1      
1332   1      
1333   1          /***************************************************************************
1334   1          * LVI/HVI must be disabled in Hibernate
1335   1          ***************************************************************************/
1336   1      
1337   1          /* Save LVI/HVI configuration and disable them */
1338   1          CyPmHviLviSaveDisable();
1339   1      
1340   1      
1341   1          /* Make the same preparations for Hibernate and Sleep modes */
1342   1          CyPmHibSlpSaveSet();
1343   1      
1344   1      
1345   1          /***************************************************************************
1346   1          * Save and set the power mode wakeup trim registers
1347   1          ***************************************************************************/
1348   1          cyPmBackup.wakeupTrim0 = CY_PM_PWRSYS_WAKE_TR0_REG;
1349   1          cyPmBackup.wakeupTrim1 = CY_PM_PWRSYS_WAKE_TR1_REG;
1350   1      
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 23  

1351   1          CY_PM_PWRSYS_WAKE_TR0_REG = CY_PM_PWRSYS_WAKE_TR0;
1352   1          CY_PM_PWRSYS_WAKE_TR1_REG = CY_PM_PWRSYS_WAKE_TR1;
1353   1      }
1354          
1355          
1356          /*******************************************************************************
1357          * Function Name: CyPmHibRestore
1358          ********************************************************************************
1359          *
1360          * Summary:
1361          *  Restores the device for the proper Hibernate mode exit:
1362          *  - Restores LVI/HVI configuration - calsl CyPmHviLviRestore()
1363          *  - CyPmHibSlpSaveRestore() function is called
1364          *  - Restores ILO power down mode state and enables it
1365          *  - Restores the state of 1 kHz and 100 kHz ILO and disables them
1366          *  - Restores the sleep regulator settings
1367          *
1368          * Parameters:
1369          *  None
1370          *
1371          * Return:
1372          *  None
1373          *
1374          *******************************************************************************/
1375          static void CyPmHibRestore(void) 
1376          {
1377   1          /* Restore LVI/HVI configuration */
1378   1          CyPmHviLviRestore();
1379   1      
1380   1          /* Restore the same configuration for Hibernate and Sleep modes */
1381   1          CyPmHibSlpRestore();
1382   1      
1383   1          /* Restore 1kHz ILO enable state */
1384   1          if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
1385   1          {
1386   2              /* Enable 1kHz ILO */
1387   2              CyILO_Start1K();
1388   2          }
1389   1      
1390   1          /* Restore 100kHz ILO enable state */
1391   1          if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
1392   1          {
1393   2              /* Enable 100kHz ILO */
1394   2              CyILO_Start100K();
1395   2          }
1396   1      
1397   1          /* Restore ILO power mode */
1398   1          (void) CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
1399   1      
1400   1      
1401   1          if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
1402   1          {
1403   2              /* Enable the sleep regulator */
1404   2              CY_PM_PWRSYS_SLP_TR_REG &= ((uint8)(~CY_PM_PWRSYS_SLP_TR_BYPASS));
1405   2          }
1406   1      
1407   1      
1408   1          /***************************************************************************
1409   1          * Restore the power mode wakeup trim registers
1410   1          ***************************************************************************/
1411   1          CY_PM_PWRSYS_WAKE_TR0_REG = cyPmBackup.wakeupTrim0;
1412   1          CY_PM_PWRSYS_WAKE_TR1_REG = cyPmBackup.wakeupTrim1;
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 24  

1413   1      }
1414          
1415          
1416          /*******************************************************************************
1417          * Function Name: CyPmCtwSetInterval
1418          ********************************************************************************
1419          *
1420          * Summary:
1421          *  Performs the CTW configuration:
1422          *  - Disables the CTW interrupt
1423          *  - Enables 1 kHz ILO
1424          *  - Sets a new CTW interval
1425          *
1426          * Parameters:
1427          *  ctwInterval: the CTW interval to be set.
1428          *
1429          * Return:
1430          *  None
1431          *
1432          * Side Effects:
1433          *  Enables ILO 1 KHz clock and leaves it enabled.
1434          *
1435          *******************************************************************************/
1436          void CyPmCtwSetInterval(uint8 ctwInterval) 
1437          {
1438   1          /* Disable CTW interrupt enable */
1439   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_IE));
1440   1      
1441   1          /* Enable 1kHz ILO (required for CTW operation) */
1442   1          CyILO_Start1K();
1443   1      
1444   1          /* Interval could be set only while CTW is disabled */
1445   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1446   1          {
1447   2              /* Set CTW interval if needed */
1448   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1449   2              {
1450   3                  /* Disable the CTW, set new CTW interval and enable it again */
1451   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_EN));
1452   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1453   3                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1454   3              }   /* Required interval is already set */
1455   2          }
1456   1          else
1457   1          {
1458   2              /* Set CTW interval if needed */
1459   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1460   2              {
1461   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1462   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1463   3              }   /* Required interval is already set */
1464   2      
1465   2              /* Enable CTW */
1466   2              CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1467   2          }
1468   1      }
1469          
1470          
1471          /*******************************************************************************
1472          * Function Name: CyPmOppsSet
1473          ********************************************************************************
1474          *
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 25  

1475          * Summary:
1476          *  Performs 1PPS configuration:
1477          *  - Starts 32 KHz XTAL
1478          *  - Disables 1PPS interrupts
1479          *  - Enables 1PPS
1480          *
1481          * Parameters:
1482          *  None
1483          *
1484          * Return:
1485          *  None
1486          *
1487          *******************************************************************************/
1488          void CyPmOppsSet(void) 
1489          {
1490   1          /* Enable 32kHz XTAL if needed */
1491   1          if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1492   1          {
1493   2              /* Enable 32kHz XTAL */
1494   2              CyXTAL_32KHZ_Start();
1495   2          }
1496   1      
1497   1          /* Disable 1PPS interrupt enable */
1498   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_1PPS_IE));
1499   1      
1500   1          /* Enable 1PPS operation */
1501   1          CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1502   1      }
1503          
1504          
1505          /*******************************************************************************
1506          * Function Name: CyPmFtwSetInterval
1507          ********************************************************************************
1508          *
1509          * Summary:
1510          *  Performs the FTW configuration:
1511          *  - Disables the FTW interrupt
1512          *  - Enables 100 kHz ILO
1513          *  - Sets a new FTW interval.
1514          *
1515          * Parameters:
1516          *  ftwInterval - FTW counter interval.
1517          *
1518          * Return:
1519          *  None
1520          *
1521          * Side Effects:
1522          *  Enables the ILO 100 KHz clock and leaves it enabled.
1523          *
1524          *******************************************************************************/
1525          void CyPmFtwSetInterval(uint8 ftwInterval) 
1526          {
1527   1          /* Disable FTW interrupt enable */
1528   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_IE));
1529   1      
1530   1          /* Enable 100kHz ILO */
1531   1          CyILO_Start100K();
1532   1      
1533   1          /* Interval could be set only while FTW is disabled */
1534   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1535   1          {
1536   2              /* Disable FTW, set new FTW interval if needed and enable it again */
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 26  

1537   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1538   2              {
1539   3                  /* Disable CTW, set new CTW interval and enable it again */
1540   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_EN));
1541   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1542   3                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1543   3              }   /* Required interval is already set */
1544   2          }
1545   1          else
1546   1          {
1547   2              /* Set new FTW counter interval if needed. FTW is disabled. */
1548   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1549   2              {
1550   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1551   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1552   3              }   /* Required interval is already set */
1553   2      
1554   2              /* Enable FTW */
1555   2              CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1556   2          }
1557   1      }
1558          
1559          
1560          /*******************************************************************************
1561          * Function Name: CyPmHibSlpSaveSet
1562          ********************************************************************************
1563          *
1564          * Summary:
1565          *  This API is used for preparing the device for the Sleep and Hibernate low power
1566          *  modes entry:
1567          *  - Saves the COMP, VIDAC, DSM, and SAR routing connections (PSoC 5)
1568          *  - Saves the SC/CT routing connections (PSoC 3/5/5LP)
1569          *  - Disables the Serial Wire Viewer (SWV) (PSoC 3)
1570          *  - Saves the boost reference selection and sets it to internal
1571          *
1572          * Parameters:
1573          *  None
1574          *
1575          * Return:
1576          *  None
1577          *
1578          * Reentrant:
1579          *  No
1580          *
1581          *******************************************************************************/
1582          static void CyPmHibSlpSaveSet(void) 
1583          {
1584   1          /* Save SC/CT routing registers */
1585   1          cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
1586   1          cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
1587   1          cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
1588   1          cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
1589   1          cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
1590   1          cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
1591   1          cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
1592   1      
1593   1          cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
1594   1          cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
1595   1          cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
1596   1          cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
1597   1          cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
1598   1          cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 27  

1599   1          cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
1600   1      
1601   1          cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
1602   1          cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
1603   1          cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
1604   1          cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
1605   1          cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
1606   1          cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
1607   1          cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
1608   1      
1609   1          cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
1610   1          cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
1611   1          cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
1612   1          cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
1613   1          cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
1614   1          cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
1615   1          cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
1616   1      
1617   1          CY_SET_REG8(CYREG_SC0_SW0 , 0u);
1618   1          CY_SET_REG8(CYREG_SC0_SW2 , 0u);
1619   1          CY_SET_REG8(CYREG_SC0_SW3 , 0u);
1620   1          CY_SET_REG8(CYREG_SC0_SW4 , 0u);
1621   1          CY_SET_REG8(CYREG_SC0_SW6 , 0u);
1622   1          CY_SET_REG8(CYREG_SC0_SW8 , 0u);
1623   1          CY_SET_REG8(CYREG_SC0_SW10, 0u);
1624   1      
1625   1          CY_SET_REG8(CYREG_SC1_SW0 , 0u);
1626   1          CY_SET_REG8(CYREG_SC1_SW2 , 0u);
1627   1          CY_SET_REG8(CYREG_SC1_SW3 , 0u);
1628   1          CY_SET_REG8(CYREG_SC1_SW4 , 0u);
1629   1          CY_SET_REG8(CYREG_SC1_SW6 , 0u);
1630   1          CY_SET_REG8(CYREG_SC1_SW8 , 0u);
1631   1          CY_SET_REG8(CYREG_SC1_SW10, 0u);
1632   1      
1633   1          CY_SET_REG8(CYREG_SC2_SW0 , 0u);
1634   1          CY_SET_REG8(CYREG_SC2_SW2 , 0u);
1635   1          CY_SET_REG8(CYREG_SC2_SW3 , 0u);
1636   1          CY_SET_REG8(CYREG_SC2_SW4 , 0u);
1637   1          CY_SET_REG8(CYREG_SC2_SW6 , 0u);
1638   1          CY_SET_REG8(CYREG_SC2_SW8 , 0u);
1639   1          CY_SET_REG8(CYREG_SC2_SW10, 0u);
1640   1      
1641   1          CY_SET_REG8(CYREG_SC3_SW0 , 0u);
1642   1          CY_SET_REG8(CYREG_SC3_SW2 , 0u);
1643   1          CY_SET_REG8(CYREG_SC3_SW3 , 0u);
1644   1          CY_SET_REG8(CYREG_SC3_SW4 , 0u);
1645   1          CY_SET_REG8(CYREG_SC3_SW6 , 0u);
1646   1          CY_SET_REG8(CYREG_SC3_SW8 , 0u);
1647   1          CY_SET_REG8(CYREG_SC3_SW10, 0u);
1648   1      
1649   1      
1650   1          #if(CY_PSOC3)
1651   1      
1652   1              /* Serial Wire Viewer (SWV) workaround */
1653   1      
1654   1              /* Disable SWV before entering low power mode */
1655   1              if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
1656   1              {
1657   2                  /* Save SWV clock enabled state */
1658   2                  cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
1659   2      
1660   2                  /* Save current ports drive mode settings */
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 28  

1661   2                  cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ((uint8)(~CY_PM_PRT1_PC3_DM_MASK));
1662   2      
1663   2                  /* Set drive mode to strong output */
1664   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1665   2                                      CY_PM_PRT1_PC3_DM_STRONG;
1666   2      
1667   2                  /* Disable SWV clocks */
1668   2                  CY_PM_MLOGIC_DBG_REG &= ((uint8)(~CY_PM_MLOGIC_DBG_SWV_CLK_EN));
1669   2              }
1670   1              else
1671   1              {
1672   2                  /* Save SWV clock disabled state */
1673   2                  cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
1674   2              }
1675   1      
1676   1          #endif  /* (CY_PSOC3) */
1677   1      
1678   1      
1679   1          /***************************************************************************
1680   1          * Save boost reference and set it to boost's internal by clearing the bit.
1681   1          * External (chip bandgap) reference is not available in Sleep and Hibernate.
1682   1          ***************************************************************************/
1683   1          if(0u != (CY_PM_BOOST_CR2_REG & CY_PM_BOOST_CR2_EREFSEL_EXT))
1684   1          {
1685   2              cyPmBackup.boostRefExt = CY_PM_ENABLED;
1686   2              CY_PM_BOOST_CR2_REG &= ((uint8)(~CY_PM_BOOST_CR2_EREFSEL_EXT));
1687   2          }
1688   1          else
1689   1          {
1690   2              cyPmBackup.boostRefExt = CY_PM_DISABLED;
1691   2          }
1692   1      }
1693          
1694          
1695          /*******************************************************************************
1696          * Function Name: CyPmHibSlpRestore
1697          ********************************************************************************
1698          *
1699          * Summary:
1700          *  This API is used for restoring the device configurations after wakeup from the Sleep
1701          *  and Hibernate low power modes:
1702          *  - Restores the SC/CT routing connections
1703          *  - Restores the enable state of the Serial Wire Viewer (SWV) (PSoC 3)
1704          *  - Restores the  boost reference selection
1705          *
1706          * Parameters:
1707          *  None
1708          *
1709          * Return:
1710          *  None
1711          *
1712          *******************************************************************************/
1713          static void CyPmHibSlpRestore(void) 
1714          {
1715   1          /* Restore SC/CT routing registers */
1716   1          CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
1717   1          CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
1718   1          CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
1719   1          CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
1720   1          CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
1721   1          CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
1722   1          CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 29  

1723   1      
1724   1          CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
1725   1          CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
1726   1          CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
1727   1          CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
1728   1          CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
1729   1          CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
1730   1          CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
1731   1      
1732   1          CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
1733   1          CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
1734   1          CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
1735   1          CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
1736   1          CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
1737   1          CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
1738   1          CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
1739   1      
1740   1          CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
1741   1          CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
1742   1          CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
1743   1          CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
1744   1          CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
1745   1          CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
1746   1          CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
1747   1      
1748   1      
1749   1          #if(CY_PSOC3)
1750   1      
1751   1              /* Serial Wire Viewer (SWV) workaround */
1752   1              if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
1753   1              {
1754   2                  /* Restore ports drive mode */
1755   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1756   2                                          cyPmBackup.prt1Dm;
1757   2      
1758   2                  /* Enable SWV clocks */
1759   2                  CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
1760   2              }
1761   1      
1762   1          #endif /* (CY_PSOC3) */
1763   1      
1764   1      
1765   1          /* Restore boost reference */
1766   1          if(CY_PM_ENABLED == cyPmBackup.boostRefExt)
1767   1          {
1768   2              CY_PM_BOOST_CR2_REG |= CY_PM_BOOST_CR2_EREFSEL_EXT;
1769   2          }
1770   1      }
1771          
1772          
1773          /*******************************************************************************
1774          * Function Name: CyPmHviLviSaveDisable
1775          ********************************************************************************
1776          *
1777          * Summary:
1778          *  Saves analog and digital LVI and HVI configuration and disables them.
1779          *
1780          * Parameters:
1781          *  None
1782          *
1783          * Return:
1784          *  None
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 30  

1785          *
1786          * Reentrant:
1787          *  No
1788          *
1789          *******************************************************************************/
1790          static void CyPmHviLviSaveDisable(void) 
1791          {
1792   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVID_EN))
1793   1          {
1794   2              cyPmBackup.lvidEn = CY_PM_ENABLED;
1795   2              cyPmBackup.lvidTrip = CY_VD_LVI_TRIP_REG & CY_VD_LVI_TRIP_LVID_MASK;
1796   2      
1797   2              /* Save state of reset device at specified Vddd threshold */
1798   2              cyPmBackup.lvidRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESD_EN)) ? \
1799   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1800   2      
1801   2              CyVdLvDigitDisable();
1802   2          }
1803   1          else
1804   1          {
1805   2              cyPmBackup.lvidEn = CY_PM_DISABLED;
1806   2          }
1807   1      
1808   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVIA_EN))
1809   1          {
1810   2              cyPmBackup.lviaEn = CY_PM_ENABLED;
1811   2              cyPmBackup.lviaTrip = CY_VD_LVI_TRIP_REG >> 4u;
1812   2      
1813   2              /* Save state of reset device at specified Vdda threshold */
1814   2              cyPmBackup.lviaRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESA_EN)) ? \
1815   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1816   2      
1817   2              CyVdLvAnalogDisable();
1818   2          }
1819   1          else
1820   1          {
1821   2              cyPmBackup.lviaEn = CY_PM_DISABLED;
1822   2          }
1823   1      
1824   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_HVIA_EN))
1825   1          {
1826   2              cyPmBackup.hviaEn = CY_PM_ENABLED;
1827   2              CyVdHvAnalogDisable();
1828   2          }
1829   1          else
1830   1          {
1831   2              cyPmBackup.hviaEn = CY_PM_DISABLED;
1832   2          }
1833   1      }
1834          
1835          
1836          /*******************************************************************************
1837          * Function Name: CyPmHviLviRestore
1838          ********************************************************************************
1839          *
1840          * Summary:
1841          *  Restores the analog and digital LVI and HVI configuration.
1842          *
1843          * Parameters:
1844          *  None
1845          *
1846          * Return:
C51 COMPILER V9.51   CYPM                                                                  09/27/2016 06:28:46 PAGE 31  

1847          *  None
1848          *
1849          * Reentrant:
1850          *  No
1851          *
1852          *******************************************************************************/
1853          static void CyPmHviLviRestore(void) 
1854          {
1855   1          /* Restore LVI/HVI configuration */
1856   1          if(CY_PM_ENABLED == cyPmBackup.lvidEn)
1857   1          {
1858   2              CyVdLvDigitEnable(cyPmBackup.lvidRst, cyPmBackup.lvidTrip);
1859   2          }
1860   1      
1861   1          if(CY_PM_ENABLED == cyPmBackup.lviaEn)
1862   1          {
1863   2              CyVdLvAnalogEnable(cyPmBackup.lviaRst, cyPmBackup.lviaTrip);
1864   2          }
1865   1      
1866   1          if(CY_PM_ENABLED == cyPmBackup.hviaEn)
1867   1          {
1868   2              CyVdHvAnalogEnable();
1869   2          }
1870   1      }
1871          
1872          
1873          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4253    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     86    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
