C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CLOCK_1
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\Clock_1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Clock_1.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) P
                    -R(.\DP8051_Keil_951\Debug/Clock_1.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\Clock_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Clock_1.c
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *   This file provides the source code to the API for the clock component.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include <cydevice_trm.h>
  18          #include "Clock_1.h"
  19          
  20          /* Clock Distribution registers. */
  21          #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22          #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23          #define BCFG2_MASK               (0x80u)
  24          #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25          #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26          
  27          #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: Clock_1_Start
  32          ********************************************************************************
  33          *
  34          * Summary:
  35          *  Starts the clock. Note that on startup, clocks may be already running if the
  36          *  "Start on Reset" option is enabled in the DWR.
  37          *
  38          * Parameters:
  39          *  None
  40          *
  41          * Returns:
  42          *  None
  43          *
  44          *******************************************************************************/
  45          void Clock_1_Start(void) 
  46          {
  47   1          /* Set the bit to enable the clock. */
  48   1          Clock_1_CLKEN |= Clock_1_CLKEN_MASK;
  49   1              Clock_1_CLKSTBY |= Clock_1_CLKSTBY_MASK;
  50   1      }
  51          
  52          
  53          /*******************************************************************************
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 2   

  54          * Function Name: Clock_1_Stop
  55          ********************************************************************************
  56          *
  57          * Summary:
  58          *  Stops the clock and returns immediately. This API does not require the
  59          *  source clock to be running but may return before the hardware is actually
  60          *  disabled. If the settings of the clock are changed after calling this
  61          *  function, the clock may glitch when it is started. To avoid the clock
  62          *  glitch, use the StopBlock function.
  63          *
  64          * Parameters:
  65          *  None
  66          *
  67          * Returns:
  68          *  None
  69          *
  70          *******************************************************************************/
  71          void Clock_1_Stop(void) 
  72          {
  73   1          /* Clear the bit to disable the clock. */
  74   1          Clock_1_CLKEN &= (uint8)(~Clock_1_CLKEN_MASK);
  75   1              Clock_1_CLKSTBY &= (uint8)(~Clock_1_CLKSTBY_MASK);
  76   1      }
  77          
  78          
  79          #if(CY_PSOC3 || CY_PSOC5LP)
  80          
  81          
  82          /*******************************************************************************
  83          * Function Name: Clock_1_StopBlock
  84          ********************************************************************************
  85          *
  86          * Summary:
  87          *  Stops the clock and waits for the hardware to actually be disabled before
  88          *  returning. This ensures that the clock is never truncated (high part of the
  89          *  cycle will terminate before the clock is disabled and the API returns).
  90          *  Note that the source clock must be running or this API will never return as
  91          *  a stopped clock cannot be disabled.
  92          *
  93          * Parameters:
  94          *  None
  95          *
  96          * Returns:
  97          *  None
  98          *
  99          *******************************************************************************/
 100          void Clock_1_StopBlock(void) 
 101          {
 102   1          if ((Clock_1_CLKEN & Clock_1_CLKEN_MASK) != 0u)
 103   1          {
 104   2      #if HAS_CLKDIST_LD_DISABLE
 105   2              uint16 oldDivider;
 106   2      
 107   2              CLK_DIST_LD = 0u;
 108   2      
 109   2              /* Clear all the mask bits except ours. */
 110   2      #if defined(Clock_1__CFG3)
                      CLK_DIST_AMASK = Clock_1_CLKEN_MASK;
                      CLK_DIST_DMASK = 0x00u;
              #else
 114   2              CLK_DIST_DMASK = Clock_1_CLKEN_MASK;
 115   2              CLK_DIST_AMASK = 0x00u;
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 3   

 116   2      #endif /* Clock_1__CFG3 */
 117   2      
 118   2              /* Clear mask of bus clock. */
 119   2              CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 120   2      
 121   2              oldDivider = CY_GET_REG16(Clock_1_DIV_PTR);
 122   2              CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 123   2              CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 124   2      
 125   2              /* Wait for clock to be disabled */
 126   2              while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 127   2      #endif /* HAS_CLKDIST_LD_DISABLE */
 128   2      
 129   2              /* Clear the bit to disable the clock. */
 130   2              Clock_1_CLKEN &= (uint8)(~Clock_1_CLKEN_MASK);
 131   2              Clock_1_CLKSTBY &= (uint8)(~Clock_1_CLKSTBY_MASK);
 132   2      
 133   2      #if HAS_CLKDIST_LD_DISABLE
 134   2              /* Clear the disable bit */
 135   2              CLK_DIST_LD = 0x00u;
 136   2              CY_SET_REG16(Clock_1_DIV_PTR, oldDivider);
 137   2      #endif /* HAS_CLKDIST_LD_DISABLE */
 138   2          }
 139   1      }
 140          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141          
 142          
 143          /*******************************************************************************
 144          * Function Name: Clock_1_StandbyPower
 145          ********************************************************************************
 146          *
 147          * Summary:
 148          *  Sets whether the clock is active in standby mode.
 149          *
 150          * Parameters:
 151          *  state:  0 to disable clock during standby, nonzero to enable.
 152          *
 153          * Returns:
 154          *  None
 155          *
 156          *******************************************************************************/
 157          void Clock_1_StandbyPower(uint8 state) 
 158          {
 159   1          if(state == 0u)
 160   1          {
 161   2              Clock_1_CLKSTBY &= (uint8)(~Clock_1_CLKSTBY_MASK);
 162   2          }
 163   1          else
 164   1          {
 165   2              Clock_1_CLKSTBY |= Clock_1_CLKSTBY_MASK;
 166   2          }
 167   1      }
 168          
 169          
 170          /*******************************************************************************
 171          * Function Name: Clock_1_SetDividerRegister
 172          ********************************************************************************
 173          *
 174          * Summary:
 175          *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176          *  register is set to zero or changed from zero, the clock will be temporarily
 177          *  disabled in order to change the SSS mode bit. If the clock is enabled when
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 4   

 178          *  SetDividerRegister is called, then the source clock must be running.
 179          *
 180          * Parameters:
 181          *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182          *    divider; the clock hardware divides by clkDivider plus one. For example,
 183          *    to divide the clock by 2, this parameter should be set to 1.
 184          *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185          *   will be truncated and the new divide value will take effect immediately. If
 186          *   zero, the new divide value will take effect at the end of the current clock
 187          *   cycle.
 188          *
 189          * Returns:
 190          *  None
 191          *
 192          *******************************************************************************/
 193          void Clock_1_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194                                          
 195          {
 196   1          uint8 enabled;
 197   1      
 198   1          uint8 currSrc = Clock_1_GetSourceRegister();
 199   1          uint16 oldDivider = Clock_1_GetDividerRegister();
 200   1      
 201   1          if (clkDivider != oldDivider)
 202   1          {
 203   2              enabled = Clock_1_CLKEN & Clock_1_CLKEN_MASK;
 204   2      
 205   2              if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0u)))
 206   2              {
 207   3                  /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208   3                  if (oldDivider == 0u)
 209   3                  {
 210   4                      /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211   4                      /* don't halt the clock.  Using the shadow load isn't required as the       */
 212   4                      /* divider is ignored while SSS is set.                                     */
 213   4                      CY_SET_REG16(Clock_1_DIV_PTR, clkDivider);
 214   4                      Clock_1_MOD_SRC &= (uint8)(~CYCLK_SSS);
 215   4                  }
 216   3                  else
 217   3                  {
 218   4                      /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219   4                      /* it without bothering with the shadow load.                               */
 220   4                      Clock_1_MOD_SRC |= CYCLK_SSS;
 221   4                      CY_SET_REG16(Clock_1_DIV_PTR, clkDivider);
 222   4                  }
 223   3              }
 224   2              else
 225   2              {
 226   3                              
 227   3                  if (enabled != 0u)
 228   3                  {
 229   4                      CLK_DIST_LD = 0x00u;
 230   4      
 231   4                      /* Clear all the mask bits except ours. */
 232   4      #if defined(Clock_1__CFG3)
                              CLK_DIST_AMASK = Clock_1_CLKEN_MASK;
                              CLK_DIST_DMASK = 0x00u;
              #else
 236   4                      CLK_DIST_DMASK = Clock_1_CLKEN_MASK;
 237   4                      CLK_DIST_AMASK = 0x00u;
 238   4      #endif /* Clock_1__CFG3 */
 239   4                      /* Clear mask of bus clock. */
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 5   

 240   4                      CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 241   4      
 242   4                      /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243   4                      if (((Clock_1_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 244   4                      {
 245   5      #if HAS_CLKDIST_LD_DISABLE
 246   5                          CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 247   5                          CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 248   5      
 249   5                          /* Wait for clock to be disabled */
 250   5                          while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 251   5      #endif /* HAS_CLKDIST_LD_DISABLE */
 252   5      
 253   5                          Clock_1_CLKEN &= (uint8)(~Clock_1_CLKEN_MASK);
 254   5      
 255   5      #if HAS_CLKDIST_LD_DISABLE
 256   5                          /* Clear the disable bit */
 257   5                          CLK_DIST_LD = 0x00u;
 258   5      #endif /* HAS_CLKDIST_LD_DISABLE */
 259   5                      }
 260   4                  }
 261   3      
 262   3                  /* Load divide value. */
 263   3                  if ((Clock_1_CLKEN & Clock_1_CLKEN_MASK) != 0u)
 264   3                  {
 265   4                      /* If the clock is still enabled, use the shadow registers */
 266   4                      CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 267   4      
 268   4                      CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 269   4                      while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 270   4                  }
 271   3                  else
 272   3                  {
 273   4                      /* If the clock is disabled, set the divider directly */
 274   4                      CY_SET_REG16(Clock_1_DIV_PTR, clkDivider);
 275   4                                      Clock_1_CLKEN |= enabled;
 276   4                  }
 277   3              }
 278   2          }
 279   1      }
 280          
 281          
 282          /*******************************************************************************
 283          * Function Name: Clock_1_GetDividerRegister
 284          ********************************************************************************
 285          *
 286          * Summary:
 287          *  Gets the clock divider register value.
 288          *
 289          * Parameters:
 290          *  None
 291          *
 292          * Returns:
 293          *  Divide value of the clock minus 1. For example, if the clock is set to
 294          *  divide by 2, the return value will be 1.
 295          *
 296          *******************************************************************************/
 297          uint16 Clock_1_GetDividerRegister(void) 
 298          {
 299   1          return CY_GET_REG16(Clock_1_DIV_PTR);
 300   1      }
 301          
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 6   

 302          
 303          /*******************************************************************************
 304          * Function Name: Clock_1_SetModeRegister
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *  Sets flags that control the operating mode of the clock. This function only
 309          *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310          *  To clear flags, use the ClearModeRegister function. The clock must be
 311          *  disabled before changing the mode.
 312          *
 313          * Parameters:
 314          *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315          *   clkMode should be a set of the following optional bits or'ed together.
 316          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317          *                 occur when the divider count reaches half of the divide
 318          *                 value.
 319          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320          *                 is asserted for approximately half of its period. When
 321          *                 disabled, the output clock is asserted for one period of the
 322          *                 source clock.
 323          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324          *                 be enabled for all synchronous clocks.
 325          *   See the Technical Reference Manual for details about setting the mode of
 326          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327          *
 328          * Returns:
 329          *  None
 330          *
 331          *******************************************************************************/
 332          void Clock_1_SetModeRegister(uint8 modeBitMask) 
 333          {
 334   1          Clock_1_MOD_SRC |= modeBitMask & (uint8)Clock_1_MODE_MASK;
 335   1      }
 336          
 337          
 338          /*******************************************************************************
 339          * Function Name: Clock_1_ClearModeRegister
 340          ********************************************************************************
 341          *
 342          * Summary:
 343          *  Clears flags that control the operating mode of the clock. This function
 344          *  only changes flags from 1 to 0; flags that are already 0 will remain
 345          *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346          *  disabled before changing the mode.
 347          *
 348          * Parameters:
 349          *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350          *   clkMode should be a set of the following optional bits or'ed together.
 351          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352          *                 occur when the divider count reaches half of the divide
 353          *                 value.
 354          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355          *                 is asserted for approximately half of its period. When
 356          *                 disabled, the output clock is asserted for one period of the
 357          *                 source clock.
 358          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359          *                 be enabled for all synchronous clocks.
 360          *   See the Technical Reference Manual for details about setting the mode of
 361          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362          *
 363          * Returns:
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 7   

 364          *  None
 365          *
 366          *******************************************************************************/
 367          void Clock_1_ClearModeRegister(uint8 modeBitMask) 
 368          {
 369   1          Clock_1_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(Clock_1_MODE_MASK));
 370   1      }
 371          
 372          
 373          /*******************************************************************************
 374          * Function Name: Clock_1_GetModeRegister
 375          ********************************************************************************
 376          *
 377          * Summary:
 378          *  Gets the clock mode register value.
 379          *
 380          * Parameters:
 381          *  None
 382          *
 383          * Returns:
 384          *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385          *  ClearModeRegister descriptions for details about the mode bits.
 386          *
 387          *******************************************************************************/
 388          uint8 Clock_1_GetModeRegister(void) 
 389          {
 390   1          return Clock_1_MOD_SRC & (uint8)(Clock_1_MODE_MASK);
 391   1      }
 392          
 393          
 394          /*******************************************************************************
 395          * Function Name: Clock_1_SetSourceRegister
 396          ********************************************************************************
 397          *
 398          * Summary:
 399          *  Sets the input source of the clock. The clock must be disabled before
 400          *  changing the source. The old and new clock sources must be running.
 401          *
 402          * Parameters:
 403          *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404          *   following input sources:
 405          *   - CYCLK_SRC_SEL_SYNC_DIG
 406          *   - CYCLK_SRC_SEL_IMO
 407          *   - CYCLK_SRC_SEL_XTALM
 408          *   - CYCLK_SRC_SEL_ILO
 409          *   - CYCLK_SRC_SEL_PLL
 410          *   - CYCLK_SRC_SEL_XTALK
 411          *   - CYCLK_SRC_SEL_DSI_G
 412          *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413          *   See the Technical Reference Manual for details on clock sources.
 414          *
 415          * Returns:
 416          *  None
 417          *
 418          *******************************************************************************/
 419          void Clock_1_SetSourceRegister(uint8 clkSource) 
 420          {
 421   1          uint16 currDiv = Clock_1_GetDividerRegister();
 422   1          uint8 oldSrc = Clock_1_GetSourceRegister();
 423   1      
 424   1          if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 425   1              (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 8   

 426   1          {
 427   2              /* Switching to Master and divider is 1, set SSS, which will output master, */
 428   2              /* then set the source so we are consistent.                                */
 429   2              Clock_1_MOD_SRC |= CYCLK_SSS;
 430   2              Clock_1_MOD_SRC =
 431   2                  (Clock_1_MOD_SRC & (uint8)(~Clock_1_SRC_SEL_MSK)) | clkSource;
 432   2          }
 433   1          else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 434   1                  (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 435   1          {
 436   2              /* Switching from Master to not and divider is 1, set source, so we don't   */
 437   2              /* lock when we clear SSS.                                                  */
 438   2              Clock_1_MOD_SRC =
 439   2                  (Clock_1_MOD_SRC & (uint8)(~Clock_1_SRC_SEL_MSK)) | clkSource;
 440   2              Clock_1_MOD_SRC &= (uint8)(~CYCLK_SSS);
 441   2          }
 442   1          else
 443   1          {
 444   2              Clock_1_MOD_SRC =
 445   2                  (Clock_1_MOD_SRC & (uint8)(~Clock_1_SRC_SEL_MSK)) | clkSource;
 446   2          }
 447   1      }
 448          
 449          
 450          /*******************************************************************************
 451          * Function Name: Clock_1_GetSourceRegister
 452          ********************************************************************************
 453          *
 454          * Summary:
 455          *  Gets the input source of the clock.
 456          *
 457          * Parameters:
 458          *  None
 459          *
 460          * Returns:
 461          *  The input source of the clock. See SetSourceRegister for details.
 462          *
 463          *******************************************************************************/
 464          uint8 Clock_1_GetSourceRegister(void) 
 465          {
 466   1          return Clock_1_MOD_SRC & Clock_1_SRC_SEL_MSK;
 467   1      }
 468          
 469          
 470          #if defined(Clock_1__CFG3)
              
              
              /*******************************************************************************
              * Function Name: Clock_1_SetPhaseRegister
              ********************************************************************************
              *
              * Summary:
              *  Sets the phase delay of the analog clock. This function is only available
              *  for analog clocks. The clock must be disabled before changing the phase
              *  delay to avoid glitches.
              *
              * Parameters:
              *  clkPhase: Amount to delay the phase of the clock, in 1.0ns increments.
              *   clkPhase must be from 1 to 11 inclusive. Other values, including 0,
              *   disable the clock. clkPhase = 1 produces a 0ns delay and clkPhase = 11 
              *   produces a 10ns delay.
              *
C51 COMPILER V9.51   CLOCK_1                                                               09/27/2016 06:28:44 PAGE 9   

              * Returns:
              *  None
              *
              *******************************************************************************/
              void Clock_1_SetPhaseRegister(uint8 clkPhase) 
              {
                  Clock_1_PHASE = clkPhase & Clock_1_PHASE_MASK;
              }
              
              
              /*******************************************************************************
              * Function Name: Clock_1_GetPhase
              ********************************************************************************
              *
              * Summary:
              *  Gets the phase delay of the analog clock. This function is only available
              *  for analog clocks.
              *
              * Parameters:
              *  None
              *
              * Returns:
              *  Phase of the analog clock. See SetPhaseRegister for details.
              *
              *******************************************************************************/
              uint8 Clock_1_GetPhaseRegister(void) 
              {
                  return Clock_1_PHASE & Clock_1_PHASE_MASK;
              }
              
              #endif /* Clock_1__CFG3 */
 519          
 520          
 521          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    900    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
