C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) P
                    -R(.\DP8051_Keil_951\Debug/CyFlash.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 4.20
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2014, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          /*  The number of EEPROM arrays */
  25          #define CY_FLASH_EEPROM_NUMBER_ARRAYS                 (1u)
  26          
  27          
  28          /*******************************************************************************
  29          * Holds the die temperature, updated by CySetTemp(). Used for flash writing.
  30          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  31          * The second byte is the magnitude.
  32          *******************************************************************************/
  33          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  34          
  35          #if(CYDEV_ECC_ENABLE == 0)
  36              static uint8 * rowBuffer = 0;
  37          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  38          
  39          
  40          static cystatus CySetTempInt(void);
  41          static cystatus CyFlashGetSpcAlgorithm(void);
  42          
  43          
  44          /*******************************************************************************
  45          * Function Name: CyFlash_Start
  46          ********************************************************************************
  47          *
  48          * Summary:
  49          *  Enable the Flash.
  50          *
  51          * Parameters:
  52          *  None
  53          *
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 2   

  54          * Return:
  55          *  None
  56          *
  57          *******************************************************************************/
  58          void CyFlash_Start(void) 
  59          {
  60   1          uint8 interruptState;
  61   1      
  62   1          interruptState = CyEnterCriticalSection();
  63   1      
  64   1      
  65   1          /***************************************************************************
  66   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
  67   1          * is required for the SPC to function.
  68   1          ***************************************************************************/
  69   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
  70   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
  71   1      
  72   1      
  73   1          /***************************************************************************
  74   1          * The wake count defines the number of Bus Clock cycles it takes for the
  75   1          * flash or eeprom to wake up from a low power mode independent of the chip
  76   1          * power mode. Wake up time for these blocks is 5 us.
  77   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
  78   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
  79   1          * This register needs to be written with a value dependent on the Bus Clock
  80   1          * frequency so that the duration of the cycles is equal to or greater than
  81   1          * the 5 us delay required.
  82   1          ***************************************************************************/
  83   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
  84   1      
  85   1      
  86   1          /***************************************************************************
  87   1          * Enable flash. Active flash macros consume current, but re-enabling a
  88   1          * disabled flash macro takes 5us. If the CPU attempts to fetch out of the
  89   1          * macro during that time, it will be stalled. This bit allows the flash to
  90   1          * be enabled even if the CPU is disabled, which allows a quicker return to
  91   1          * code execution.
  92   1          ***************************************************************************/
  93   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_FM;
  94   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_FM;
  95   1      
  96   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
  97   1          {
  98   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
  99   2          }
 100   1      
 101   1          CyExitCriticalSection(interruptState);
 102   1      }
 103          
 104          
 105          /*******************************************************************************
 106          * Function Name: CyFlash_Stop
 107          ********************************************************************************
 108          *
 109          * Summary:
 110          *  Disable the Flash.
 111          *
 112          * Parameters:
 113          *  None
 114          *
 115          * Return:
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 3   

 116          *  None
 117          *
 118          * Side Effects:
 119          *  This setting is ignored as long as the CPU is currently running.  This will
 120          *  only take effect when the CPU is later disabled.
 121          *
 122          *******************************************************************************/
 123          void CyFlash_Stop(void) 
 124          {
 125   1          uint8 interruptState;
 126   1      
 127   1          interruptState = CyEnterCriticalSection();
 128   1      
 129   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_FM));
 130   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_FM));
 131   1      
 132   1          CyExitCriticalSection(interruptState);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySetTempInt
 138          ********************************************************************************
 139          *
 140          * Summary:
 141          *  Sends a command to the SPC to read the die temperature. Sets a global value
 142          *  used by the Write function. This function must be called once before
 143          *  executing a series of Flash writing functions.
 144          *
 145          * Parameters:
 146          *  None
 147          *
 148          * Return:
 149          *  status:
 150          *   CYRET_SUCCESS - if successful
 151          *   CYRET_LOCKED  - if Flash writing already in use
 152          *   CYRET_UNKNOWN - if there was an SPC error
 153          *
 154          *******************************************************************************/
 155          static cystatus CySetTempInt(void) 
 156          {
 157   1          cystatus status;
 158   1      
 159   1          /* Make sure SPC is powered */
 160   1          CySpcStart();
 161   1      
 162   1          /* Plan for failure. */
 163   1          status = CYRET_UNKNOWN;
 164   1      
 165   1          if(CySpcLock() == CYRET_SUCCESS)
 166   1          {
 167   2              /* Write the command. */
 168   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 169   2              {
 170   3                  do
 171   3                  {
 172   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 173   4                      {
 174   5                          status = CYRET_SUCCESS;
 175   5      
 176   5                          while(CY_SPC_BUSY)
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 4   

 177   5                          {
 178   6                              /* Spin until idle. */
 179   6                              CyDelayUs(1u);
 180   6                          }
 181   5                          break;
 182   5                      }
 183   4      
 184   4                  } while(CY_SPC_BUSY);
 185   3              }
 186   2      
 187   2              CySpcUnlock();
 188   2          }
 189   1          else
 190   1          {
 191   2              status = CYRET_LOCKED;
 192   2          }
 193   1      
 194   1          return (status);
 195   1      }
 196          
 197          
 198          /*******************************************************************************
 199          * Function Name: CyFlashGetSpcAlgorithm
 200          ********************************************************************************
 201          *
 202          * Summary:
 203          *  Sends a command to the SPC to download code into RAM.
 204          *
 205          * Parameters:
 206          *  None
 207          *
 208          * Return:
 209          *  status:
 210          *   CYRET_SUCCESS - if successful
 211          *   CYRET_LOCKED  - if Flash writing already in use
 212          *   CYRET_UNKNOWN - if there was an SPC error
 213          *
 214          *******************************************************************************/
 215          static cystatus CyFlashGetSpcAlgorithm(void) 
 216          {
 217   1          cystatus status;
 218   1      
 219   1          /* Make sure SPC is powered */
 220   1          CySpcStart();
 221   1      
 222   1          if(CySpcLock() == CYRET_SUCCESS)
 223   1          {
 224   2              status = CySpcGetAlgorithm();
 225   2      
 226   2              if(CYRET_STARTED == status)
 227   2              {
 228   3                  while(CY_SPC_BUSY)
 229   3                  {
 230   4                      /* Spin until idle. */
 231   4                      CyDelayUs(1u);
 232   4                  }
 233   3      
 234   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 235   3                  {
 236   4                      status = CYRET_SUCCESS;
 237   4                  }
 238   3              }
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 5   

 239   2              CySpcUnlock();
 240   2          }
 241   1          else
 242   1          {
 243   2              status = CYRET_LOCKED;
 244   2          }
 245   1      
 246   1          return (status);
 247   1      }
 248          
 249          
 250          /*******************************************************************************
 251          * Function Name: CySetTemp
 252          ********************************************************************************
 253          *
 254          * Summary:
 255          *  This is a wraparound for CySetTempInt(). It is used to return the second
 256          *  successful read of the temperature value.
 257          *
 258          * Parameters:
 259          *  None
 260          *
 261          * Return:
 262          *  status:
 263          *   CYRET_SUCCESS if successful.
 264          *   CYRET_LOCKED  if Flash writing already in use
 265          *   CYRET_UNKNOWN if there was an SPC error.
 266          *
 267          *  uint8 dieTemperature[2]:
 268          *   Holds the die temperature for the flash writing algorithm. The first byte is
 269          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 270          *   the magnitude.
 271          *
 272          *******************************************************************************/
 273          cystatus CySetTemp(void) 
 274          {
 275   1          cystatus status = CyFlashGetSpcAlgorithm();
 276   1      
 277   1          if(status == CYRET_SUCCESS)
 278   1          {
 279   2              status = CySetTempInt();
 280   2          }
 281   1      
 282   1          return (status);
 283   1      }
 284          
 285          
 286          /*******************************************************************************
 287          * Function Name: CySetFlashEEBuffer
 288          ********************************************************************************
 289          *
 290          * Summary:
 291          *  Sets the user supplied temporary buffer to store SPC data while performing
 292          *  Flash and EEPROM commands. This buffer is only necessary when the Flash ECC is
 293          *  disabled.
 294          *
 295          * Parameters:
 296          *  buffer:
 297          *   The address of a block of memory to store temporary memory. The size of the block
 298          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 299          *
 300          * Return:
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 6   

 301          *  status:
 302          *   CYRET_SUCCESS if successful.
 303          *   CYRET_BAD_PARAM if the buffer is NULL
 304          *
 305          *******************************************************************************/
 306          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 307          {
 308   1          cystatus status = CYRET_SUCCESS;
 309   1      
 310   1          CySpcStart();
 311   1      
 312   1          #if(CYDEV_ECC_ENABLE == 0)
 313   1      
 314   1              if(NULL == buffer)
 315   1              {
 316   2                  rowBuffer = rowBuffer;
 317   2                  status = CYRET_BAD_PARAM;
 318   2              }
 319   1              else if(CySpcLock() != CYRET_SUCCESS)
 320   1              {
 321   2                  rowBuffer = rowBuffer;
 322   2                  status = CYRET_LOCKED;
 323   2              }
 324   1              else
 325   1              {
 326   2                  rowBuffer = buffer;
 327   2                  CySpcUnlock();
 328   2              }
 329   1      
 330   1          #else
              
                      /* To suppress warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 336   1      
 337   1          return(status);
 338   1      }
 339          
 340          
 341          /*******************************************************************************
 342          * Function Name: CyWriteRowData
 343          ********************************************************************************
 344          *
 345          * Summary:
 346          *  Sends a command to the SPC to load and program a row of data in
 347          *  Flash or EEPROM.
 348          *
 349          * Parameters:
 350          *  arrayID:    ID of the array to write.
 351          *   The type of write, Flash or EEPROM, is determined from the array ID.
 352          *   The arrays in the part are sequential starting at the first ID for the
 353          *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 354          *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 355          *  rowAddress: rowAddress of flash row to program.
 356          *  rowData:    Array of bytes to write.
 357          *
 358          * Return:
 359          *  status:
 360          *   CYRET_SUCCESS if successful.
 361          *   CYRET_LOCKED if the SPC is already in use.
 362          *   CYRET_CANCELED if command not accepted
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 7   

 363          *   CYRET_UNKNOWN if there was an SPC error.
 364          *
 365          *******************************************************************************/
 366          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 367          {
 368   1          uint16 rowSize;
 369   1          cystatus status;
 370   1      
 371   1          rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 372   1          status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 373   1      
 374   1          return(status);
 375   1      }
 376          
 377          
 378          /*******************************************************************
 379          * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 380          * Data in ECC" DWR options are disabled, ECC section is available
 381          * for user data.
 382          *******************************************************************/
 383          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
 384          
 385              /*******************************************************************************
 386              * Function Name: CyWriteRowConfig
 387              ********************************************************************************
 388              *
 389              * Summary:
 390              *  Sends a command to the SPC to load and program a row of config data in the Flash.
 391              *  This function is only valid for Flash array IDs (not for EEPROM).
 392              *
 393              * Parameters:
 394              *  arrayId:      ID of the array to write
 395              *   The arrays in the part are sequential starting at the first ID for the
 396              *   specific memory type. The array ID for the Flash memory lasts
 397              *   from 0x00 to 0x3F.
 398              *  rowAddress:   The address of the sector to erase.
 399              *  rowECC:       The array of bytes to write.
 400              *
 401              * Return:
 402              *  status:
 403              *   CYRET_SUCCESS if successful.
 404              *   CYRET_LOCKED if the SPC is already in use.
 405              *   CYRET_CANCELED if command not accepted
 406              *   CYRET_UNKNOWN if there was an SPC error.
 407              *
 408              *******************************************************************************/
 409              cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
 410              
 411              {
 412   1              cystatus status;
 413   1      
 414   1              status = CyWriteRowFull(arrayId, rowAddress, rowECC, CYDEV_ECC_ROW_SIZE);
 415   1      
 416   1              return (status);
 417   1          }
 418          
 419          #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 420          
 421          
 422          
 423          /*******************************************************************************
 424          * Function Name: CyWriteRowFull
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 8   

 425          ********************************************************************************
 426          * Summary:
 427          *  Sends a command to the SPC to load and program a row of data in the Flash.
 428          *  rowData array is expected to contain Flash and ECC data if needed.
 429          *
 430          * Parameters:
 431          *  arrayId:    FLASH or EEPROM array id.
 432          *  rowData:    Pointer to a row of data to write.
 433          *  rowNumber:  Zero based number of the row.
 434          *  rowSize:    Size of the row.
 435          *
 436          * Return:
 437          *  CYRET_SUCCESS if successful.
 438          *  CYRET_LOCKED if the SPC is already in use.
 439          *  CYRET_CANCELED if command not accepted
 440          *  CYRET_UNKNOWN if there was an SPC error.
 441          *
 442          *******************************************************************************/
 443          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 444                  
 445          {
 446   1          cystatus status = CYRET_SUCCESS;
 447   1      
 448   1          if((arrayId <=  CY_SPC_LAST_FLASH_ARRAYID) && (arrayId > (CY_FLASH_NUMBER_ARRAYS  + CY_SPC_FIRST_FLASH
             -_ARRAYID)))
 449   1          {
 450   2              status = CYRET_BAD_PARAM;
 451   2          }
 452   1      
 453   1          if(arrayId > CY_SPC_LAST_EE_ARRAYID)
 454   1          {
 455   2              status = CYRET_BAD_PARAM;
 456   2          }
 457   1      
 458   1          if((arrayId >= CY_SPC_FIRST_EE_ARRAYID) && (arrayId > (CY_FLASH_EEPROM_NUMBER_ARRAYS + CY_SPC_FIRST_EE
             -_ARRAYID)))
 459   1          {
 460   2              status = CYRET_BAD_PARAM;
 461   2          }
 462   1      
 463   1          if(arrayId <=  CY_SPC_LAST_FLASH_ARRAYID)
 464   1          {
 465   2              /* Flash */
 466   2              if(rowNumber > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 467   2              {
 468   3                  status = CYRET_BAD_PARAM;
 469   3              }
 470   2          }
 471   1          else
 472   1          {
 473   2              /* EEPROM */
 474   2              if(rowNumber > (CY_EEPROM_NUMBER_ROWS/CY_FLASH_EEPROM_NUMBER_ARRAYS))
 475   2              {
 476   3                  status = CYRET_BAD_PARAM;
 477   3              }
 478   2      
 479   2              if(CY_EEPROM_SIZEOF_ROW != rowSize)
 480   2              {
 481   3                  status = CYRET_BAD_PARAM;
 482   3              }
 483   2          }
 484   1      
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 9   

 485   1          if(rowData == NULL)
 486   1          {
 487   2              status = CYRET_BAD_PARAM;
 488   2          }
 489   1      
 490   1      
 491   1          if(status == CYRET_SUCCESS)
 492   1          {
 493   2              if(CySpcLock() == CYRET_SUCCESS)
 494   2              {
 495   3                  /* Load row data into SPC internal latch */
 496   3                  status = CySpcLoadRowFull(arrayId, rowNumber, rowData, rowSize);
 497   3      
 498   3                  if(CYRET_STARTED == status)
 499   3                  {
 500   4                      while(CY_SPC_BUSY)
 501   4                      {
 502   5                          /* Wait for SPC to finish and get SPC status */
 503   5                          CyDelayUs(1u);
 504   5                      }
 505   4      
 506   4                      /* Hide SPC status */
 507   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 508   4                      {
 509   5                          status = CYRET_SUCCESS;
 510   5                      }
 511   4                      else
 512   4                      {
 513   5                          status = CYRET_UNKNOWN;
 514   5                      }
 515   4      
 516   4                      if(CYRET_SUCCESS == status)
 517   4                      {
 518   5                          /* Erase and program flash with data from SPC interval latch */
 519   5                          status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 520   5      
 521   5                          if(CYRET_STARTED == status)
 522   5                          {
 523   6                              while(CY_SPC_BUSY)
 524   6                              {
 525   7                                  /* Wait for SPC to finish and get SPC status */
 526   7                                  CyDelayUs(1u);
 527   7                              }
 528   6      
 529   6                              /* Hide SPC status */
 530   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 531   6                              {
 532   7                                  status = CYRET_SUCCESS;
 533   7                              }
 534   6                              else
 535   6                              {
 536   7                                  status = CYRET_UNKNOWN;
 537   7                              }
 538   6                          }
 539   5                      }
 540   4                  }
 541   3                  CySpcUnlock();
 542   3              }   /* if(CySpcLock() == CYRET_SUCCESS) */
 543   2              else
 544   2              {
 545   3                  status = CYRET_LOCKED;
 546   3              }
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 10  

 547   2          }
 548   1      
 549   1          return(status);
 550   1      }
 551          
 552          
 553          /*******************************************************************************
 554          * Function Name: CyFlash_SetWaitCycles
 555          ********************************************************************************
 556          *
 557          * Summary:
 558          *  Sets the number of clock cycles the cache will wait before it samples data
 559          *  coming back from the Flash. This function must be called before increasing the CPU
 560          *  clock frequency. It can optionally be called after lowering the CPU clock
 561          *  frequency in order to improve the CPU performance.
 562          *
 563          * Parameters:
 564          *  uint8 freq:
 565          *   Frequency of operation in Megahertz.
 566          *
 567          * Return:
 568          *  None
 569          *
 570          *******************************************************************************/
 571          void CyFlash_SetWaitCycles(uint8 freq) 
 572          {
 573   1          uint8 interruptState;
 574   1      
 575   1          /* Save current global interrupt enable and disable it */
 576   1          interruptState = CyEnterCriticalSection();
 577   1      
 578   1          /***************************************************************************
 579   1          * The number of clock cycles the cache will wait before it samples data
 580   1          * coming back from the Flash must be equal or greater to to the CPU frequency
 581   1          * outlined in clock cycles.
 582   1          ***************************************************************************/
 583   1      
 584   1          if (freq < CY_FLASH_CACHE_WS_1_FREQ_MAX)
 585   1          {
 586   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 587   2                                          CY_FLASH_CACHE_WS_1_VALUE_MASK;
 588   2          }
 589   1          else if (freq < CY_FLASH_CACHE_WS_2_FREQ_MAX)
 590   1          {
 591   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 592   2                                          CY_FLASH_CACHE_WS_2_VALUE_MASK;
 593   2          }
 594   1          else if (freq < CY_FLASH_CACHE_WS_3_FREQ_MAX)
 595   1          {
 596   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 597   2                                          CY_FLASH_CACHE_WS_3_VALUE_MASK;
 598   2          }
 599   1      #if (CY_PSOC5)
                  else if (freq < CY_FLASH_CACHE_WS_4_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_4_VALUE_MASK;
                  }
                  else if (freq <= CY_FLASH_CACHE_WS_5_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_5_VALUE_MASK;
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 11  

                  }
              #endif  /* (CY_PSOC5) */
 611   1          else
 612   1          {
 613   2              /* Halt CPU in debug mode if frequency is invalid */
 614   2              CYASSERT(0u != 0u);
 615   2          }
 616   1      
 617   1          /* Restore global interrupt enable state */
 618   1          CyExitCriticalSection(interruptState);
 619   1      }
 620          
 621          
 622          /*******************************************************************************
 623          * Function Name: CyEEPROM_Start
 624          ********************************************************************************
 625          *
 626          * Summary:
 627          *  Enable the EEPROM.
 628          *
 629          * Parameters:
 630          *  None
 631          *
 632          * Return:
 633          *  None
 634          *
 635          *******************************************************************************/
 636          void CyEEPROM_Start(void) 
 637          {
 638   1          uint8 interruptState;
 639   1      
 640   1          interruptState = CyEnterCriticalSection();
 641   1      
 642   1      
 643   1          /***************************************************************************
 644   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
 645   1          * is required for the SPC to function.
 646   1          ***************************************************************************/
 647   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
 648   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
 649   1      
 650   1      
 651   1          /***************************************************************************
 652   1          * The wake count defines the number of Bus Clock cycles it takes for the
 653   1          * flash or EEPROM to wake up from a low power mode independent of the chip
 654   1          * power mode. Wake up time for these blocks is 5 us.
 655   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
 656   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
 657   1          * This register needs to be written with a value dependent on the Bus Clock
 658   1          * frequency so that the duration of the cycles is equal to or greater than
 659   1          * the 5 us delay required.
 660   1          ***************************************************************************/
 661   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
 662   1      
 663   1      
 664   1          /***************************************************************************
 665   1          * Enable EEPROM. Re-enabling an EEPROM macro takes 5us. During this time,
 666   1          * the EE will not acknowledge a PHUB request.
 667   1          ***************************************************************************/
 668   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_EE;
 669   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_EE;
 670   1      
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 12  

 671   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
 672   1          {
 673   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
 674   2          }
 675   1      
 676   1          CyExitCriticalSection(interruptState);
 677   1      }
 678          
 679          
 680          /*******************************************************************************
 681          * Function Name: CyEEPROM_Stop
 682          ********************************************************************************
 683          *
 684          * Summary:
 685          *  Disable the EEPROM.
 686          *
 687          * Parameters:
 688          *  None
 689          *
 690          * Return:
 691          *  None
 692          *
 693          *******************************************************************************/
 694          void CyEEPROM_Stop (void) 
 695          {
 696   1          uint8 interruptState;
 697   1      
 698   1          interruptState = CyEnterCriticalSection();
 699   1      
 700   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_EE));
 701   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_EE));
 702   1      
 703   1          CyExitCriticalSection(interruptState);
 704   1      }
 705          
 706          
 707          /*******************************************************************************
 708          * Function Name: CyEEPROM_ReadReserve
 709          ********************************************************************************
 710          *
 711          * Summary:
 712          *  Request access to the EEPROM for reading and wait until access is available.
 713          *
 714          * Parameters:
 715          *  None
 716          *
 717          * Return:
 718          *  None
 719          *
 720          *******************************************************************************/
 721          void CyEEPROM_ReadReserve(void) 
 722          {
 723   1          /* Make request for PHUB to have access */
 724   1          CY_FLASH_EE_SCR_REG |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 725   1      
 726   1          while (0u == (CY_FLASH_EE_SCR_REG & CY_FLASH_EE_SCR_AHB_EE_ACK))
 727   1          {
 728   2              /* Wait for acknowledgment from PHUB */
 729   2          }
 730   1      }
 731          
 732          
C51 COMPILER V9.51   CYFLASH                                                               09/27/2016 06:28:45 PAGE 13  

 733          /*******************************************************************************
 734          * Function Name: CyEEPROM_ReadRelease
 735          ********************************************************************************
 736          *
 737          * Summary:
 738          *  Release the read reservation of the EEPROM.
 739          *
 740          * Parameters:
 741          *  None
 742          *
 743          * Return:
 744          *  None
 745          *
 746          *******************************************************************************/
 747          void CyEEPROM_ReadRelease(void) 
 748          {
 749   1          CY_FLASH_EE_SCR_REG &= (uint8)(~CY_FLASH_EE_SCR_AHB_EE_REQ);
 750   1      }
 751          
 752          
 753          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1513    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     43    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
