C51 COMPILER V9.51   LCD_CHAR_LCDPORT                                                      09/27/2016 06:28:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD_CHAR_LCDPORT
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\LCD_Char_LCDPort.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\LCD_Char_LCDPort.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) D
                    -B WL(2) PR(.\DP8051_Keil_951\Debug/LCD_Char_LCDPort.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\LCD_Char_LCDPort.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD_Char_LCDPort.c  
   3          * Version 2.10
   4          *
   5          * Description:
   6          *  This file contains API to enable firmware control of a Pins component.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "cytypes.h"
  18          #include "LCD_Char_LCDPort.h"
  19          
  20          
  21          /*******************************************************************************
  22          * Function Name: LCD_Char_LCDPort_Write
  23          ********************************************************************************
  24          *
  25          * Summary:
  26          *  Assign a new value to the digital port's data output register.  
  27          *
  28          * Parameters:  
  29          *  prtValue:  The value to be assigned to the Digital Port. 
  30          *
  31          * Return: 
  32          *  None 
  33          *  
  34          *******************************************************************************/
  35          void LCD_Char_LCDPort_Write(uint8 value) 
  36          {
  37   1          uint8 staticBits = (LCD_Char_LCDPort_DR & (uint8)(~LCD_Char_LCDPort_MASK));
  38   1          LCD_Char_LCDPort_DR = staticBits | ((uint8)(value << LCD_Char_LCDPort_SHIFT) & LCD_Char_LCDPort_MASK);
  39   1      }
  40          
  41          
  42          /*******************************************************************************
  43          * Function Name: LCD_Char_LCDPort_SetDriveMode
  44          ********************************************************************************
  45          *
  46          * Summary:
  47          *  Change the drive mode on the pins of the port.
  48          * 
  49          * Parameters:  
  50          *  mode:  Change the pins to one of the following drive modes.
  51          *
  52          *  LCD_Char_LCDPort_DM_STRONG     Strong Drive 
  53          *  LCD_Char_LCDPort_DM_OD_HI      Open Drain, Drives High 
C51 COMPILER V9.51   LCD_CHAR_LCDPORT                                                      09/27/2016 06:28:45 PAGE 2   

  54          *  LCD_Char_LCDPort_DM_OD_LO      Open Drain, Drives Low 
  55          *  LCD_Char_LCDPort_DM_RES_UP     Resistive Pull Up 
  56          *  LCD_Char_LCDPort_DM_RES_DWN    Resistive Pull Down 
  57          *  LCD_Char_LCDPort_DM_RES_UPDWN  Resistive Pull Up/Down 
  58          *  LCD_Char_LCDPort_DM_DIG_HIZ    High Impedance Digital 
  59          *  LCD_Char_LCDPort_DM_ALG_HIZ    High Impedance Analog 
  60          *
  61          * Return: 
  62          *  None
  63          *
  64          *******************************************************************************/
  65          void LCD_Char_LCDPort_SetDriveMode(uint8 mode) 
  66          {
  67   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_0, mode);
  68   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_1, mode);
  69   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_2, mode);
  70   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_3, mode);
  71   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_4, mode);
  72   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_5, mode);
  73   1              CyPins_SetPinDriveMode(LCD_Char_LCDPort_6, mode);
  74   1      }
  75          
  76          
  77          /*******************************************************************************
  78          * Function Name: LCD_Char_LCDPort_Read
  79          ********************************************************************************
  80          *
  81          * Summary:
  82          *  Read the current value on the pins of the Digital Port in right justified 
  83          *  form.
  84          *
  85          * Parameters:  
  86          *  None 
  87          *
  88          * Return: 
  89          *  Returns the current value of the Digital Port as a right justified number
  90          *  
  91          * Note:
  92          *  Macro LCD_Char_LCDPort_ReadPS calls this function. 
  93          *  
  94          *******************************************************************************/
  95          uint8 LCD_Char_LCDPort_Read(void) 
  96          {
  97   1          return (LCD_Char_LCDPort_PS & LCD_Char_LCDPort_MASK) >> LCD_Char_LCDPort_SHIFT;
  98   1      }
  99          
 100          
 101          /*******************************************************************************
 102          * Function Name: LCD_Char_LCDPort_ReadDataReg
 103          ********************************************************************************
 104          *
 105          * Summary:
 106          *  Read the current value assigned to a Digital Port's data output register
 107          *
 108          * Parameters:  
 109          *  None 
 110          *
 111          * Return: 
 112          *  Returns the current value assigned to the Digital Port's data output register
 113          *  
 114          *******************************************************************************/
 115          uint8 LCD_Char_LCDPort_ReadDataReg(void) 
C51 COMPILER V9.51   LCD_CHAR_LCDPORT                                                      09/27/2016 06:28:45 PAGE 3   

 116          {
 117   1          return (LCD_Char_LCDPort_DR & LCD_Char_LCDPort_MASK) >> LCD_Char_LCDPort_SHIFT;
 118   1      }
 119          
 120          
 121          /* If Interrupts Are Enabled for this Pins component */ 
 122          #if defined(LCD_Char_LCDPort_INTSTAT) 
              
                  /*******************************************************************************
                  * Function Name: LCD_Char_LCDPort_ClearInterrupt
                  ********************************************************************************
                  *
                  * Summary:
                  *  Clears any active interrupts attached to port and returns the value of the 
                  *  interrupt status register.
                  *
                  * Parameters:  
                  *  None 
                  *
                  * Return: 
                  *  Returns the value of the interrupt status register
                  *  
                  *******************************************************************************/
                  uint8 LCD_Char_LCDPort_ClearInterrupt(void) 
                  {
                      return (LCD_Char_LCDPort_INTSTAT & LCD_Char_LCDPort_MASK) >> LCD_Char_LCDPort_SHIFT;
                  }
              
              #endif /* If Interrupts Are Enabled for this Pins component */ 
 145          
 146          
 147          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
