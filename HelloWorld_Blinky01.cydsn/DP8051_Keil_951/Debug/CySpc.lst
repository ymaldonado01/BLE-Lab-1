C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) PR(
                    -.\DP8051_Keil_951\Debug/CySpc.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CySpc.c
   3          * Version 4.20
   4          *
   5          *  Description:
   6          *   Provides an API for the System Performance Component.
   7          *   The SPC functions are not meant to be called directly by the user
   8          *   application.
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
                  /***************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 2   

                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ********************************************************************************
  68          * Summary:
  69          *  Starts the SPC.
  70          *
  71          * Parameters:
  72          *  None
  73          *
  74          * Return:
  75          *  None
  76          *
  77          *******************************************************************************/
  78          void CySpcStart(void) 
  79          {
  80   1          /* Save current global interrupt enable and disable it */
  81   1          uint8 interruptState = CyEnterCriticalSection();
  82   1      
  83   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  84   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  85   1      
  86   1          /* Restore global interrupt enable state */
  87   1          CyExitCriticalSection(interruptState);
  88   1      }
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: CySpcStop
  93          ********************************************************************************
  94          * Summary:
  95          *  Stops the SPC.
  96          *
  97          * Parameters:
  98          *  None
  99          *
 100          * Return:
 101          *  None
 102          *
 103          *******************************************************************************/
 104          void CySpcStop(void) 
 105          {
 106   1          /* Save current global interrupt enable and disable it */
 107   1          uint8 interruptState = CyEnterCriticalSection();
 108   1      
 109   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
 110   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
 111   1      
 112   1          /* Restore global interrupt enable state */
 113   1          CyExitCriticalSection(interruptState);
 114   1      }
 115          
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 3   

 116          
 117          /*******************************************************************************
 118          * Function Name: CySpcReadData
 119          ********************************************************************************
 120          * Summary:
 121          *  Reads data from the SPC.
 122          *
 123          * Parameters:
 124          *  uint8 buffer:
 125          *   Address to store data read.
 126          *
 127          *  uint8 size:
 128          *   Number of bytes to read from the SPC.
 129          *
 130          * Return:
 131          *  uint8:
 132          *   The number of bytes read from the SPC.
 133          *
 134          *******************************************************************************/
 135          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 136          {
 137   1          uint8 i;
 138   1      
 139   1          for(i = 0u; i < size; i++)
 140   1          {
 141   2              while(!CY_SPC_DATA_READY)
 142   2              {
 143   3                  CyDelayUs(1u);
 144   3              }
 145   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 146   2          }
 147   1      
 148   1          return(i);
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: CySpcLoadMultiByte
 154          ********************************************************************************
 155          * Summary:
 156          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 157          *
 158          * Parameters:
 159          *  uint8 array:
 160          *   Id of the array.
 161          *
 162          *  uint16 address:
 163          *   Flash/eeprom addrress
 164          *
 165          *  uint8* buffer:
 166          *   Data to load to the row latch
 167          *
 168          *  uint16 number:
 169          *   Number bytes to load.
 170          *
 171          * Return:
 172          *  CYRET_STARTED
 173          *  CYRET_CANCELED
 174          *  CYRET_LOCKED
 175          *  CYRET_BAD_PARAM
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 4   

 178          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 179          
 180          {
 181   1          cystatus status = CYRET_STARTED;
 182   1          uint8 i;
 183   1      
 184   1          /***************************************************************************
 185   1          * Check if number is correct for array. Number must be less than
 186   1          * 32 for Flash or less than 16 for EEPROM.
 187   1          ***************************************************************************/
 188   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 189   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 190   1          {
 191   2              if(CY_SPC_IDLE)
 192   2              {
 193   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 194   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 195   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
 196   3      
 197   3                  if(CY_SPC_BUSY)
 198   3                  {
 199   4                      CY_SPC_CPU_DATA_REG = array;
 200   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 201   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 202   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 203   4      
 204   4                      for(i = 0u; i < size; i++)
 205   4                      {
 206   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 207   5                      }
 208   4                  }
 209   3                  else
 210   3                  {
 211   4                      status = CYRET_CANCELED;
 212   4                  }
 213   3              }
 214   2              else
 215   2              {
 216   3                  status = CYRET_LOCKED;
 217   3              }
 218   2          }
 219   1          else
 220   1          {
 221   2              status = CYRET_BAD_PARAM;
 222   2          }
 223   1      
 224   1          return(status);
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: CySpcLoadRow
 230          ********************************************************************************
 231          * Summary:
 232          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 233          *
 234          *  The buffer pointer should point to the data that should be written to the
 235          *  flash row directly (no data in ECC/flash will be preserved). It is Flash API
 236          *  responsibility to prepare data: the preserved data are copied from flash into
 237          *  array with the modified data.
 238          *
 239          * Parameters:
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 5   

 240          *  uint8 array:
 241          *   Id of the array.
 242          *
 243          *  uint8* buffer:
 244          *   Data to be loaded to the row latch
 245          *
 246          *  uint8 size:
 247          *   The number of data bytes that the SPC expects to be written. Depends on the
 248          *   type of the array and, if the array is Flash, whether ECC is being enabled
 249          *   or not. There are following values: flash row latch size with ECC enabled,
 250          *   flash row latch size with ECC disabled and EEPROM row latch size.
 251          *
 252          * Return:
 253          *  CYRET_STARTED
 254          *  CYRET_CANCELED
 255          *  CYRET_LOCKED
 256          *
 257          *******************************************************************************/
 258          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 259          {
 260   1          cystatus status = CYRET_STARTED;
 261   1          uint16 i;
 262   1      
 263   1          /* Make sure the SPC is ready to accept command */
 264   1          if(CY_SPC_IDLE)
 265   1          {
 266   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 267   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 268   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 269   2      
 270   2              /* Make sure the command was accepted */
 271   2              if(CY_SPC_BUSY)
 272   2              {
 273   3                  CY_SPC_CPU_DATA_REG = array;
 274   3      
 275   3                  for(i = 0u; i < size; i++)
 276   3                  {
 277   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 278   4                  }
 279   3              }
 280   2              else
 281   2              {
 282   3                  status = CYRET_CANCELED;
 283   3              }
 284   2          }
 285   1          else
 286   1          {
 287   2              status = CYRET_LOCKED;
 288   2          }
 289   1      
 290   1          return(status);
 291   1      }
 292          
 293          
 294          /*******************************************************************************
 295          * Function Name: CySpcLoadRowFull
 296          ********************************************************************************
 297          * Summary:
 298          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 299          *
 300          *  The only data that are going to be changed should be passed. The function
 301          *  will handle unmodified data preservation based on DWR settings and input
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 6   

 302          *  parameters.
 303          *
 304          * Parameters:
 305          *  uint8 array:
 306          *   Id of the array.
 307          *
 308          *  uint16 row:
 309          *   Flash row number to be loaded.
 310          *
 311          *  uint8* buffer:
 312          *   Data to be loaded to the row latch
 313          *
 314          *  uint8 size:
 315          *   The number of data bytes that the SPC expects to be written. Depends on the
 316          *   type of the array and, if the array is Flash, whether ECC is being enabled
 317          *   or not. There are following values: flash row latch size with ECC enabled,
 318          *   flash row latch size with ECC disabled and EEPROM row latch size.
 319          *
 320          * Return:
 321          *  CYRET_STARTED
 322          *  CYRET_CANCELED
 323          *  CYRET_LOCKED
 324          *
 325          *******************************************************************************/
 326          cystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
 327          
 328          {
 329   1          cystatus status = CYRET_STARTED;
 330   1          uint16 i;
 331   1      
 332   1          #if (CYDEV_ECC_ENABLE == 0)
 333   1              uint32 offset;
 334   1          #endif /* (CYDEV_ECC_ENABLE == 0) */
 335   1      
 336   1          /* Make sure the SPC is ready to accept command */
 337   1          if(CY_SPC_IDLE)
 338   1          {
 339   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 340   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 341   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 342   2      
 343   2              /* Make sure the command was accepted */
 344   2              if(CY_SPC_BUSY)
 345   2              {
 346   3                  CY_SPC_CPU_DATA_REG = array;
 347   3      
 348   3                  /*******************************************************************
 349   3                  * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 350   3                  * Data in ECC" DWR options are disabled, ECC section is available
 351   3                  * for user data.
 352   3                  *******************************************************************/
 353   3                  #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
 354   3      
 355   3                      /*******************************************************************
 356   3                      * If size parameter equals size of the ECC row and selected array
 357   3                      * identification corresponds to the flash array (but not to EEPROM
 358   3                      * array) then data are going to be written to the ECC section.
 359   3                      * In this case flash data must be preserved. The flash data copied
 360   3                      * from flash data section to the SPC data register.
 361   3                      *******************************************************************/
 362   3                      if ((size == CYDEV_ECC_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 363   3                      {
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 7   

 364   4                          offset = CYDEV_FLS_BASE +
 365   4                                   ((uint32) array * CYDEV_FLS_SECTOR_SIZE) +
 366   4                                   ((uint32)   row * CYDEV_FLS_ROW_SIZE   );
 367   4      
 368   4                          for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
 369   4                          {
 370   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 371   5                          }
 372   4                      }
 373   3      
 374   3                  #endif /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 375   3      
 376   3      
 377   3                  for(i = 0u; i < size; i++)
 378   3                  {
 379   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 380   4                  }
 381   3      
 382   3      
 383   3                  /*******************************************************************
 384   3                  * If "Enable Error Correcting Code (ECC)" DWR option is disabled,
 385   3                  * ECC section can be used for storing device configuration data
 386   3                  * ("Store Configuration Data in ECC" DWR option is enabled) or for
 387   3                  * storing user data in the ECC section ("Store Configuration Data in
 388   3                  * ECC" DWR option is enabled). In both cases, the data in the ECC
 389   3                  * section must be preserved if flash data is written.
 390   3                  *******************************************************************/
 391   3                  #if (CYDEV_ECC_ENABLE == 0)
 392   3      
 393   3      
 394   3                      /*******************************************************************
 395   3                      * If size parameter equals size of the flash row and selected array
 396   3                      * identification corresponds to the flash array (but not to EEPROM
 397   3                      * array) then data are going to be written to the flash data
 398   3                      * section. In this case, ECC section data must be preserved.
 399   3                      * The ECC section data copied from ECC section to the SPC data
 400   3                      * register.
 401   3                      *******************************************************************/
 402   3                      if ((size == CYDEV_FLS_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 403   3                      {
 404   4                          offset = CYDEV_ECC_BASE +
 405   4                                  ((uint32) array * CYDEV_ECC_SECTOR_SIZE) +
 406   4                                  ((uint32) row   * CYDEV_ECC_ROW_SIZE   );
 407   4      
 408   4                          for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 409   4                          {
 410   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 411   5                          }
 412   4                      }
 413   3      
 414   3                  #else
              
                              if(0u != row)
                              {
                                  /* To remove unreferenced local variable warning */
                              }
              
                          #endif /* (CYDEV_ECC_ENABLE == 0) */
 422   3              }
 423   2              else
 424   2              {
 425   3                  status = CYRET_CANCELED;
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 8   

 426   3              }
 427   2          }
 428   1          else
 429   1          {
 430   2              status = CYRET_LOCKED;
 431   2          }
 432   1      
 433   1          return(status);
 434   1      }
 435          
 436          
 437          /*******************************************************************************
 438          * Function Name: CySpcWriteRow
 439          ********************************************************************************
 440          * Summary:
 441          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 442          *
 443          * Parameters:
 444          *  uint8 array:
 445          *   Id of the array.
 446          *
 447          *  uint16 address:
 448          *   flash/eeprom addrress
 449          *
 450          *  uint8 tempPolarity:
 451          *   temperature polarity.
 452          *   1: the Temp Magnitude is interpreted as a positive value
 453          *   0: the Temp Magnitude is interpreted as a negative value
 454          *
 455          *  uint8 tempMagnitude:
 456          *   temperature magnitude.
 457          *
 458          * Return:
 459          *  CYRET_STARTED
 460          *  CYRET_CANCELED
 461          *  CYRET_LOCKED
 462          *
 463          *******************************************************************************/
 464          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 465          
 466          {
 467   1          cystatus status = CYRET_STARTED;
 468   1      
 469   1          /* Make sure the SPC is ready to accept command */
 470   1          if(CY_SPC_IDLE)
 471   1          {
 472   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 473   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 474   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 475   2      
 476   2              /* Make sure the command was accepted */
 477   2              if(CY_SPC_BUSY)
 478   2              {
 479   3                  CY_SPC_CPU_DATA_REG = array;
 480   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 481   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 482   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 483   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 484   3              }
 485   2              else
 486   2              {
 487   3                  status = CYRET_CANCELED;
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 9   

 488   3              }
 489   2          }
 490   1          else
 491   1          {
 492   2              status = CYRET_LOCKED;
 493   2          }
 494   1      
 495   1          return(status);
 496   1      }
 497          
 498          
 499          /*******************************************************************************
 500          * Function Name: CySpcEraseSector
 501          ********************************************************************************
 502          * Summary:
 503          *  Erases all data in the addressed sector (block of 64 rows).
 504          *
 505          * Parameters:
 506          *  uint8 array:
 507          *   Id of the array.
 508          *
 509          *  uint8 sectorNumber:
 510          *   Zero based sector number within Flash/EEPROM array
 511          *
 512          * Return:
 513          *  CYRET_STARTED
 514          *  CYRET_CANCELED
 515          *  CYRET_LOCKED
 516          *
 517          *******************************************************************************/
 518          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 519          {
 520   1          cystatus status = CYRET_STARTED;
 521   1      
 522   1          /* Make sure the SPC is ready to accept command */
 523   1          if(CY_SPC_IDLE)
 524   1          {
 525   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 526   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 527   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 528   2      
 529   2              /* Make sure the command was accepted */
 530   2              if(CY_SPC_BUSY)
 531   2              {
 532   3                  CY_SPC_CPU_DATA_REG = array;
 533   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 534   3              }
 535   2              else
 536   2              {
 537   3                  status = CYRET_CANCELED;
 538   3              }
 539   2          }
 540   1          else
 541   1          {
 542   2              status = CYRET_LOCKED;
 543   2          }
 544   1      
 545   1          return(status);
 546   1      }
 547          
 548          
 549          /*******************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 10  

 550          * Function Name: CySpcGetTemp
 551          ********************************************************************************
 552          * Summary:
 553          *  Returns the internal die temperature
 554          *
 555          * Parameters:
 556          *  uint8 numSamples:
 557          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 558          *   respectively.
 559          *
 560          * uint16 timerPeriod:
 561          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 562          *   of 16 bit values are ignored.
 563          *
 564          * uint8 clkDivSelect:
 565          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 566          *
 567          * Return:
 568          *  CYRET_STARTED
 569          *  CYRET_CANCELED
 570          *  CYRET_LOCKED
 571          *
 572          *******************************************************************************/
 573          cystatus CySpcGetTemp(uint8 numSamples)
 574          {
 575   1          cystatus status = CYRET_STARTED;
 576   1      
 577   1          /* Make sure the SPC is ready to accept command */
 578   1          if(CY_SPC_IDLE)
 579   1          {
 580   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 581   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 582   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 583   2      
 584   2              /* Make sure the command was accepted */
 585   2              if(CY_SPC_BUSY)
 586   2              {
 587   3                  CY_SPC_CPU_DATA_REG = numSamples;
 588   3              }
 589   2              else
 590   2              {
 591   3                  status = CYRET_CANCELED;
 592   3              }
 593   2          }
 594   1          else
 595   1          {
 596   2              status = CYRET_LOCKED;
 597   2          }
 598   1      
 599   1          return(status);
 600   1      }
 601          
 602          
 603          /*******************************************************************************
 604          * Function Name: CySpcLock
 605          ********************************************************************************
 606          * Summary:
 607          *  Locks the SPC so it can not be used by someone else:
 608          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 609          *
 610          * Parameters:
 611          *  Note
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 11  

 612          *
 613          * Return:
 614          *  CYRET_SUCCESS - if the resource was free.
 615          *  CYRET_LOCKED  - if the SPC is in use.
 616          *
 617          *******************************************************************************/
 618          cystatus CySpcLock(void)
 619          {
 620   1          cystatus status = CYRET_LOCKED;
 621   1          uint8 interruptState;
 622   1      
 623   1          /* Enter critical section */
 624   1          interruptState = CyEnterCriticalSection();
 625   1      
 626   1          if(CY_SPC_UNLOCKED == SpcLockState)
 627   1          {
 628   2              SpcLockState = CY_SPC_LOCKED;
 629   2              status = CYRET_SUCCESS;
 630   2      
 631   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
                      #endif  /* (CY_PSOC5) */
 647   2          }
 648   1      
 649   1          /* Exit critical section */
 650   1          CyExitCriticalSection(interruptState);
 651   1      
 652   1          return(status);
 653   1      }
 654          
 655          
 656          /*******************************************************************************
 657          * Function Name: CySpcUnlock
 658          ********************************************************************************
 659          * Summary:
 660          *  Unlocks the SPC so it can be used by someone else:
 661          *   - Restores wait-pipeline enable state (PSoC5)
 662          *
 663          * Parameters:
 664          *  None
 665          *
 666          * Return:
 667          *  None
 668          *
 669          *******************************************************************************/
 670          void CySpcUnlock(void)
 671          {
 672   1          uint8 interruptState;
 673   1      
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 12  

 674   1          /* Enter critical section */
 675   1          interruptState = CyEnterCriticalSection();
 676   1      
 677   1          /* Release the SPC object */
 678   1          SpcLockState = CY_SPC_UNLOCKED;
 679   1      
 680   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 696   1      
 697   1          /* Exit critical section */
 698   1          CyExitCriticalSection(interruptState);
 699   1      }
 700          
 701          
 702          /*******************************************************************************
 703          * Function Name: CySpcGetAlgorithm
 704          ********************************************************************************
 705          * Summary:
 706          *  Downloads SPC algorithm from SPC SROM into SRAM.
 707          *
 708          * Parameters:
 709          *  None
 710          *
 711          * Return:
 712          *  CYRET_STARTED
 713          *  CYRET_LOCKED
 714          *
 715          *******************************************************************************/
 716          cystatus CySpcGetAlgorithm(void)
 717          {
 718   1          cystatus status = CYRET_STARTED;
 719   1      
 720   1          /* Make sure the SPC is ready to accept command */
 721   1          if(CY_SPC_IDLE)
 722   1          {
 723   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 724   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_DWNLD_ALGORITHM);
 725   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_DWNLD_ALGORITHM;
 726   2          }
 727   1          else
 728   1          {
 729   2              status = CYRET_LOCKED;
 730   2          }
 731   1      
 732   1          return(status);
 733   1      }
 734          
 735          /* [] END OF FILE */
C51 COMPILER V9.51   CYSPC                                                                 09/27/2016 06:28:46 PAGE 13  

 736          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1757    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     56    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
