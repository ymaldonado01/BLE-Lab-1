C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL
                    -(2) PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator  3.1 SP3
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 2   

  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: ClockSetup
  93          ********************************************************************************
  94          *
  95          * Summary:
  96          *  Performs the initialization of all of the clocks in the device based on the
  97          *  settings in the Clock tab of the DWR.  This includes enabling the requested
  98          *  clocks and setting the necessary dividers to produce the desired frequency. 
  99          *
 100          * Parameters:
 101          *  void
 102          *
 103          * Return:
 104          *  void
 105          *
 106          *******************************************************************************/
 107          static void ClockSetup(void);
 108          static void ClockSetup(void)
 109          {
 110   1              uint32 timeout;
 111   1              uint8 pllLock;
 112   1      
 113   1      
 114   1              /* Configure Digital Clocks based on settings from Clock DWR */
 115   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0003u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 3   

 116   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x1Bu);
 117   1      
 118   1              /* Configure ILO based on settings from Clock DWR */
 119   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 120   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 121   1      
 122   1              /* Configure IMO based on settings from Clock DWR */
 123   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 124   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 125   1      
 126   1              /* Configure PLL based on settings from Clock DWR */
 127   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 128   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 129   1              /* Wait up to 250us for the PLL to lock */
 130   1              pllLock = 0u;
 131   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 132   1              { 
 133   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 134   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 135   2              }
 136   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 137   1              if (timeout == 0u)
 138   1              {
 139   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 140   2              }
 141   1      
 142   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 143   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 144   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 148   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 149   1      
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 151   1      }
 152          
 153          
 154          /* Analog API Functions */
 155          
 156          
 157          /*******************************************************************************
 158          * Function Name: AnalogSetDefault
 159          ********************************************************************************
 160          *
 161          * Summary:
 162          *  Sets up the analog portions of the chip to default values based on chip
 163          *  configuration options from the project.
 164          *
 165          * Parameters:
 166          *  void
 167          *
 168          * Return:
 169          *  void
 170          *
 171          *******************************************************************************/
 172          static void AnalogSetDefault(void);
 173          static void AnalogSetDefault(void)
 174          {
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 4   

 175   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 176   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 178   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 179   1      }
 180          
 181          
 182          /*******************************************************************************
 183          * Function Name: SetAnalogRoutingPumps
 184          ********************************************************************************
 185          *
 186          * Summary:
 187          * Enables or disables the analog pumps feeding analog routing switches.
 188          * Intended to be called at startup, based on the Vdda system configuration;
 189          * may be called during operation when the user informs us that the Vdda voltage
 190          * crossed the pump threshold.
 191          *
 192          * Parameters:
 193          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 194          *
 195          * Return:
 196          *  void
 197          *
 198          *******************************************************************************/
 199          void SetAnalogRoutingPumps(uint8 enabled)
 200          {
 201   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 202   1              if (enabled != 0u)
 203   1              {
 204   2                      regValue |= 0x00u;
 205   2              }
 206   1              else
 207   1              {
 208   2                      regValue &= (uint8)~0x00u;
 209   2              }
 210   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 211   1      }
 212          
 213          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 214          
 215          
 216          /*******************************************************************************
 217          * Function Name: cyfitter_cfg
 218          ********************************************************************************
 219          * Summary:
 220          *  This function is called by the start-up code for the selected device. It
 221          *  performs all of the necessary device configuration based on the design
 222          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 223          *  as Clocks and Pins as well as any component configuration that is necessary.
 224          *
 225          * Parameters:  
 226          *   void
 227          *
 228          * Return:
 229          *   void
 230          *
 231          *******************************************************************************/
 232          
 233          void cyfitter_cfg(void)
 234          {
 235   1              /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 236   1              static const uint8 CYCODE BS_IOPINS0_0_VAL[] = {
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 5   

 237   1                      0x00u, 0x01u, 0x01u, 0x00u, 0x01u, 0x00u, 0x00u, 0x00u};
 238   1      
 239   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 240   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 241   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 242   1      
 243   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 244   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 245   1      
 246   1              {
 247   2                      static const uint8 CYCODE cfg_byte_table[] = {
 248   2                              0x08u,
 249   2                              0x00u, 0x4Fu, 0x01u, /* Base address 0x004F00 */
 250   2                              /* CYREG_TMR0_CFG0 */
 251   2                              0x0Au, 0x4Bu, 
 252   2                              0x01u, 0x07u, 0x01u, /* Base address 0x010700 */
 253   2                              /* CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u */
 254   2                              0xEEu, 0x08u, 
 255   2                              0x01u, 0x09u, 0x01u, /* Base address 0x010900 */
 256   2                              /* CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u */
 257   2                              0xAFu, 0x20u, 
 258   2                              0x01u, 0x0Au, 0x04u, /* Base address 0x010A00 */
 259   2                              /* CYDEV_UCFG_B0_P5_U1_BASE */
 260   2                              0xB8u, 0x20u, 0xBEu, 0x10u, 0xD8u, 0x04u, 0xDFu, 0x01u, 
 261   2                              0x01u, 0x0Bu, 0x01u, /* Base address 0x010B00 */
 262   2                              /* CYDEV_UCFG_B0_P5_ROUTE_BASE */
 263   2                              0x1Fu, 0x20u, 
 264   2                              0x01u, 0x41u, 0x02u, /* Base address 0x014100 */
 265   2                              /* CYDEV_UCFG_DSI1_BASE */
 266   2                              0x53u, 0x08u, 
 267   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 268   2                              0xD4u, 0x20u, 
 269   2                              0x01u, 0x42u, 0x03u, /* Base address 0x014200 */
 270   2                              /* CYDEV_UCFG_DSI2_BASE */
 271   2                              0x63u, 0x02u, 
 272   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 273   2                              0xA7u, 0x08u, 0xD6u, 0x40u, 
 274   2                              0x01u, 0x43u, 0x05u, /* Base address 0x014300 */
 275   2                              /* CYDEV_UCFG_DSI3_BASE */
 276   2                              0x1Bu, 0x08u, 
 277   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 278   2                              0xA7u, 0x08u, 0xAFu, 0x01u, 0xC6u, 0x10u, 0xEEu, 0x10u, 
 279   2                      };
 280   2                      /* BYTES: 61 */
 281   2      
 282   2      
 283   2                      CYPACKED typedef struct {
 284   2                              void CYFAR *address;
 285   2                              uint16 size;
 286   2                      } CYPACKED_ATTR cfg_memset_t;
 287   2      
 288   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 289   2                              /* address, size */
 290   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 291   2                              {(void CYFAR *)(CYREG_PRT1_DR), 16u},
 292   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 293   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 294   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 295   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 296   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 297   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 6   

 298   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 299   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 300   2                      };
 301   2      
 302   2                      uint8 CYDATA i;
 303   2      
 304   2                      /* Zero out critical memory blocks before beginning configuration */
 305   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 306   2                      {
 307   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 308   3                              CYMEMZERO(ms->address, ms->size);
 309   3                      }
 310   2      
 311   2                      cfg_write_bytes_code(cfg_byte_table);
 312   2      
 313   2                      /* Enable digital routing */
 314   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 315   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 316   2      
 317   2                      /* Enable UDB array */
 318   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 319   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 320   2              }
 321   1      
 322   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 323   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT0_DM0), (const void CYCODE *)(BS_IOPINS0_0_VAL), 8u);
 324   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 325   1      
 326   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 327   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 328   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 329   1              {
 330   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 331   2              }
 332   1      
 333   1      
 334   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 335   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 336   1              /* Setup clocks based on selections from Clock DWR */
 337   1              ClockSetup();
 338   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 339   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 340   1      
 341   1              /* Perform basic analog initialization to defaults */
 342   1              AnalogSetDefault();
 343   1      
 344   1              /* Configure alternate active mode */
 345   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 346   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 347   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    743    ----
   CONSTANT SIZE    =    127    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/27/2016 06:28:43 PAGE 7   

   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
